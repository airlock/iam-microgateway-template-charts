{{- if has "loginapp" .Values.global.modules }}
apiVersion: microgateway.airlock.com/v1alpha1
kind: DenyRules
metadata:
  name: loginapp-rest-oauth2-deny-rules
spec:
  request:
    builtIn:
      settings:
        level: Strict
        threatHandlingMode: Block
      overrides:
        - conditions:
            ruleKeys:
              - SSRF
            types:
              - JSON
          settings:
            level: Unfiltered
      exceptions:
      - ruleKeys:
        - "SCANNING"
        blockedData:
          json:
            jsonPath: "$['password','oldPassword','newPassword']"
      - ruleKeys:
        - "BOT"
        blockedData:
          header:
            name:
              matcher:
                regex: "^User-Agent$"
        requestConditions:
          method:
          - "POST"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/rest/oauth2/authorization-servers/[a-zA-Z0-9._\\-]+/(?:token|introspect|revoke|par)/?$"
              ignoreCase: false
      - ruleKeys:
        - "BOT"
        blockedData:
          header:
            name:
              matcher:
                regex: "^User-Agent$"
        requestConditions:
          method:
          - "POST"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/rest/public/tech-client-registration/oauth2/[a-zA-Z0-9._\\-]+/register/?$"
              ignoreCase: false
      - ruleKeys:
        - "SQL"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^(?:state|nonce|id_token_hint|login_hint|code_challenge|redirect_uri)$"
                ignoreCase: false
        requestConditions:
          method:
          - "GET"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}(?:/oauth2/v3/[a-zA-Z0-9._\\-]+/authorize/?|/ui/app/auth/oauth2/authorization-servers/[a-zA-Z0-9._\\-]+/authorize/?)"
              ignoreCase: false
      - ruleKeys:
        - "SQL"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^(?:code|state)$"
                ignoreCase: false
        requestConditions:
          method:
          - "GET"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/oauth2-client(?:/.*)?$"
              ignoreCase: false
      - ruleKeys:
        - "SQL"
        blockedData:
          json:
            jsonPath: "$['password','oldPassword','newPassword']"
      - ruleKeys:
        - "SQL"
        blockedData:
          json:
            jsonPath: "$.consentToken"
        requestConditions:
          method:
          - "POST"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/rest/public/authentication/oauth2/authorization-server/consent/remote/check/?$"
              ignoreCase: false
      - ruleKeys:
        - "SQL"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^(?:sso|ticket|representation)$"
                ignoreCase: false
      - ruleKeys:
        - "SQL"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^sessionIdToDelete$"
                ignoreCase: false
        requestConditions:
          method:
          - "POST"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/oauth2-manage/?$"
              ignoreCase: false
      - ruleKeys:
        - "SQL"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^(?:subject_token|actor_token|redirect_uri|code_challenge|code_verifier|token|client_assertion)$"
                ignoreCase: false
        requestConditions:
          method:
          - "POST"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/rest/oauth2/authorization-servers/[a-zA-Z0-9._\\-]+/(?:token|introspect|revoke|par)/?$"
              ignoreCase: false
      - ruleKeys:
        - "SQL"
        blockedData:
          json:
            jsonPath: "$.queryString"
        requestConditions:
          method:
          - "POST"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/rest/public/authentication/oauth2/authorization-servers/[a-zA-Z0-9._\\-]+/authorize/?$"
              ignoreCase: false
      - ruleKeys:
        - "SQL"
        blockedData:
          json:
            jsonPath: "$['username','representeeName']"
      - ruleKeys:
        - "SQL"
        blockedData:
          json:
            jsonPath: "$.email"
      - ruleKeys:
        - "SQL"
        blockedData:
          json:
            jsonPath: "$.data.email"
      - ruleKeys:
        - "SQL"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^(?:code|state)$"
                ignoreCase: false
        requestConditions:
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/ui/app/(.*/)?oauth2/.*"
              ignoreCase: false
      - ruleKeys:
        - "SQL"
        blockedData:
          json:
            jsonPath: "$.queryString"
        requestConditions:
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/rest/public/authentication/oauth2/client/authorization/check/?$"
              ignoreCase: false
      - ruleKeys:
        - "SQL"
        blockedData:
          json:
            jsonPath: "$.queryString"
        requestConditions:
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/rest/protected/self-service/oauth2/client/authorization/check/?$"
              ignoreCase: false
      - ruleKeys:
        - "SQL"
        blockedData:
          header:
            name:
              matcher:
                regex: "^X-Captcha-Solution$"
      - ruleKeys:
        - "XSS"
        blockedData:
          json:
            jsonPath: "$['password','oldPassword','newPassword']"
      - ruleKeys:
        - "XSS"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^(?:sso|ticket|representation)$"
                ignoreCase: false
      - ruleKeys:
        - "XSS"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^Location$"
                ignoreCase: false
      - ruleKeys:
        - "XSS"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^error_description$"
                ignoreCase: false
        requestConditions:
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/oauth2-client(?:/.*)?$"
              ignoreCase: false
      - ruleKeys:
        - "XSS"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^filter$"
                ignoreCase: false
      - ruleKeys:
        - "XSS"
        blockedData:
          json:
            jsonPath: "$.queryString"
        requestConditions:
          method:
          - "POST"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/rest/protected/self-service/oauth2/client/authorization/check/?$"
              ignoreCase: false
      - ruleKeys:
        - "XSS"
        blockedData:
          json:
            jsonPath: "$.queryString"
        requestConditions:
          method:
          - "POST"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/rest/public/authentication/oauth2/client/authorization/check/?$"
              ignoreCase: false
      - ruleKeys:
        - "XSS"
        blockedData:
          json:
            jsonPath: "$.queryString"
        requestConditions:
          method:
          - "POST"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/rest/public/authentication/oauth2/authorization-servers/[a-zA-Z0-9._\\-]+/authorize/?$"
              ignoreCase: false
      - ruleKeys:
        - "TEMPLATE"
        blockedData:
          json:
            jsonPath: "$['password','oldPassword','newPassword']"
      - ruleKeys:
        - "HTML"
        blockedData:
          json:
            jsonPath: "$['password','oldPassword','newPassword']"
      - ruleKeys:
        - "UNIXCMD"
        blockedData:
          json:
            jsonPath: "$['password','oldPassword','newPassword']"
      - ruleKeys:
        - "UNIXCMD"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^(?:sso|ticket|representation)$"
                ignoreCase: false
      - ruleKeys:
        - "UNIXCMD"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^Location$"
                ignoreCase: false
      - ruleKeys:
        - "UNIXCMD"
        blockedData:
          json:
            jsonPath: "$.queryString"
        requestConditions:
          method:
          - "POST"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/rest/public/authentication/oauth2/authorization-servers/[a-zA-Z0-9._\\-]+/authorize/?$"
              ignoreCase: false
      - ruleKeys:
        - "WINCMD"
        blockedData:
          json:
            jsonPath: "$['password','oldPassword','newPassword']"
      - ruleKeys:
        - "WINCMD"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^(?:sso|ticket|representation)$"
                ignoreCase: false
      - ruleKeys:
        - "LDAP"
        blockedData:
          json:
            jsonPath: "$['password','oldPassword','newPassword']"
      - ruleKeys:
        - "LDAP"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^(?:sso|ticket|representation)$"
                ignoreCase: false
      - ruleKeys:
        - "PHP"
        blockedData:
          json:
            jsonPath: "$['password','oldPassword','newPassword']"
      - ruleKeys:
        - "OGNL"
        blockedData:
          json:
            jsonPath: "$['password','oldPassword','newPassword']"
      - ruleKeys:
        - "IDOR"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^(?:Signature|SAMLRequest|SAMLResponse|RelayState|SAMLart|SigAlg)$"
                ignoreCase: false
      - ruleKeys:
        - "IDOR"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^(?:state|nonce|id_token_hint|login_hint|code_challenge|redirect_uri)$"
                ignoreCase: false
        requestConditions:
          method:
          - "GET"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}(?:/oauth2/v3/[a-zA-Z0-9._\\-]+/authorize/?|/ui/app/auth/oauth2/authorization-servers/[a-zA-Z0-9._\\-]+/authorize/?)"
              ignoreCase: false
      - ruleKeys:
        - "IDOR"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^(?:code|state)$"
                ignoreCase: false
        requestConditions:
          method:
          - "GET"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/oauth2-client(?:/.*)?$"
              ignoreCase: false
      - ruleKeys:
        - "IDOR"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^(?:sso|ticket|representation)$"
                ignoreCase: false
      - ruleKeys:
        - "IDOR"
        blockedData:
          json:
            jsonPath: "$['password','oldPassword','newPassword']"
      - ruleKeys:
        - "IDOR"
        blockedData:
          json:
            jsonPath: "$.queryString"
        requestConditions:
          method:
          - "POST"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/rest/protected/self-service/oauth2/client/authorization/check/?$"
              ignoreCase: false
      - ruleKeys:
        - "IDOR"
        blockedData:
          json:
            jsonPath: "$.consentToken"
        requestConditions:
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/rest/public/authentication/oauth2/authorization-server/consent/remote/check/?$"
              ignoreCase: false
      - ruleKeys:
        - "IDOR"
        blockedData:
          json:
            jsonPath: "$.queryString"
        requestConditions:
          method:
          - "POST"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/rest/public/authentication/oauth2/client/authorization/check/?$"
              ignoreCase: false
      - ruleKeys:
        - "IDOR"
        blockedData:
          json:
            jsonPath: "$.queryString"
        requestConditions:
          method:
          - "POST"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/rest/public/authentication/oauth2/authorization-servers/[a-zA-Z0-9._\\-]+/authorize/?$"
              ignoreCase: false
      - ruleKeys:
        - "IDOR"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^(?:subject_token|actor_token|redirect_uri|code_challenge|code_verifier|token|client_assertion)$"
                ignoreCase: false
        requestConditions:
          method:
          - "POST"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/rest/oauth2/authorization-servers/[a-zA-Z0-9._\\-]+/(?:token|introspect|revoke|par)/?$"
              ignoreCase: false
      - ruleKeys:
        - "NOSQL"
        blockedData:
          json:
            jsonPath: "$['password','oldPassword','newPassword']"
      - ruleKeys:
        - "SANITY"
        blockedData:
          json:
            jsonPath: "$['password','oldPassword','newPassword']"
      - ruleKeys:
        - "ENCODING"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^(?:sso|ticket|representation)$"
                ignoreCase: false
      - ruleKeys:
        - "ENCODING"
        blockedData:
          json:
            jsonPath: "$['password','oldPassword','newPassword']"
      - ruleKeys:
        - "PROTOCOL"
        blockedData:
          json:
            jsonPath: "$['password','oldPassword','newPassword']"
      - ruleKeys:
        - "HPP"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^(?:subject_token|actor_token|redirect_uri|code_challenge|code_verifier|token|client_assertion)$"
                ignoreCase: false
        requestConditions:
          method:
          - "POST"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/rest/oauth2/authorization-servers/[a-zA-Z0-9._\\-]+/(?:token|introspect|revoke|par)/?$"
              ignoreCase: false
      - ruleKeys:
        - "HPP"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^(?:state|nonce|id_token_hint|login_hint|code_challenge|redirect_uri)$"
                ignoreCase: false
        requestConditions:
          method:
          - "GET"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}(?:/oauth2/v3/[a-zA-Z0-9._\\-]+/authorize/?|/ui/app/auth/oauth2/authorization-servers/[a-zA-Z0-9._\\-]+/authorize/?)"
              ignoreCase: false
      - ruleKeys:
        - "HPP"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^Location$"
                ignoreCase: false
            value:
              matcher:
                regex: "/representation/start"
                ignoreCase: false
      - ruleKeys:
        - "HPP"
        blockedData:
          json:
            jsonPath: "$['password','oldPassword','newPassword']"
      - ruleKeys:
        - "HPP"
        blockedData:
          json:
            jsonPath: "$.queryString"
        requestConditions:
          method:
          - "POST"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/rest/protected/self-service/oauth2/client/authorization/check/?$"
              ignoreCase: false
      - ruleKeys:
        - "HPP"
        blockedData:
          json:
            jsonPath: "$.queryString"
        requestConditions:
          method:
          - "POST"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/rest/public/authentication/oauth2/client/authorization/check/?$"
              ignoreCase: false
      - ruleKeys:
        - "HPP"
        blockedData:
          json:
            jsonPath: "$.queryString"
        requestConditions:
          method:
          - "POST"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/rest/public/authentication/oauth2/authorization-servers/[a-zA-Z0-9._\\-]+/authorize/?$"
              ignoreCase: false
      - ruleKeys:
        - "HPP"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^(?:sso|ticket|representation)$"
                ignoreCase: false
      - ruleKeys:
        - "HPP"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^Location$"
                ignoreCase: false
      - ruleKeys:
        - "EXPLOIT"
        blockedData:
          json:
            jsonPath: "$['password','oldPassword','newPassword']"
      - ruleKeys:
        - "SSRF"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^(?:Signature|SAMLRequest|SAMLResponse|RelayState|SAMLart|SigAlg)$"
                ignoreCase: false
      - ruleKeys:
        - "SSRF"
        blockedData:
          parameter:
            name:
              matcher:
                regex: "^resource$"
                ignoreCase: false
        requestConditions:
          method:
          - "POST"
          path:
            matcher:
              regex: "^{{ .Values.global.path.loginapp }}/rest/oauth2/authorization-servers/[a-zA-Z0-9._\\-]+/(?:token|introspect|revoke|par)/?$"
              ignoreCase: false

{{- end }}