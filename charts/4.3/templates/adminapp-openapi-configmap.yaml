{{- if has "adminapp" .Values.global.modules }}
apiVersion: v1
data:
  openapi.json: |-
    {
      "openapi": "3.0.1",
      "info": {
        "title": "Airlock IAM Adminapp REST API",
        "version": "",
        "x-jerseyapp": "base"
      },
      "servers": [
        {
          "url": "{{ .Values.global.path.adminapp }}/rest"
        }
      ],
      "tags": [
        {
          "name": "/_Internal",
          "x-displayName": "Internal"
        },
        {
          "name": "/_other",
          "x-displayName": "other"
        },
        {
          "name": "/_Password",
          "x-displayName": "Password"
        },
        {
          "name": "/_My",
          "x-displayName": "My"
        },
        {
          "name": "/_License",
          "x-displayName": "License"
        },
        {
          "name": "/_Logs",
          "x-displayName": "Logs"
        },
        {
          "name": "/_Maintenance Messages",
          "x-displayName": "Maintenance Messages"
        },
        {
          "name": "/_SMS",
          "x-displayName": "SMS"
        },
        {
          "name": "/_System",
          "x-displayName": "System"
        },
        {
          "name": "/_Administrator",
          "x-displayName": "Administrator"
        },
        {
          "name": "/_Context Data",
          "x-displayName": "Context Data"
        },
        {
          "name": "/_Locking",
          "x-displayName": "Locking"
        },
        {
          "name": "/_Roles",
          "x-displayName": "Roles"
        },
        {
          "name": "/_Technical Client",
          "x-displayName": "Technical Client"
        },
        {
          "name": "/_API key",
          "x-displayName": "API key"
        },
        {
          "name": "/_API Key",
          "x-displayName": "API Key"
        },
        {
          "name": "/_Plan Usage",
          "x-displayName": "Plan Usage"
        },
        {
          "name": "/_Subscription",
          "x-displayName": "Subscription"
        },
        {
          "name": "/_Airlock 2FA",
          "x-displayName": "Airlock 2FA"
        },
        {
          "name": "/_Vasco",
          "x-displayName": "Vasco"
        },
        {
          "name": "/_Account Linking",
          "x-displayName": "Account Linking"
        },
        {
          "name": "/_OAuth 2.0",
          "x-displayName": "OAuth 2.0"
        },
        {
          "name": "/_Remember-Me",
          "x-displayName": "Remember-Me"
        },
        {
          "name": "/_Statistics",
          "x-displayName": "Statistics"
        },
        {
          "name": "/_Validity",
          "x-displayName": "Validity"
        },
        {
          "name": "/_Token Migration Bulk Change",
          "x-displayName": "Token Migration Bulk Change"
        },
        {
          "name": "/_Generic Token",
          "x-displayName": "Generic Token"
        },
        {
          "name": "/_Authentication",
          "x-displayName": "Authentication"
        },
        {
          "name": "/_Certificate",
          "x-displayName": "Certificate"
        },
        {
          "name": "/_Cronto",
          "x-displayName": "Cronto"
        },
        {
          "name": "/_FIDO",
          "x-displayName": "FIDO"
        },
        {
          "name": "/_OATH OTP",
          "x-displayName": "OATH OTP"
        },
        {
          "name": "/_Matrix",
          "x-displayName": "Matrix"
        },
        {
          "name": "/_mTAN",
          "x-displayName": "mTAN"
        },
        {
          "name": "/_Secret Questions",
          "x-displayName": "Secret Questions"
        },
        {
          "name": "/authentication_Internal",
          "x-displayName": "Internal"
        },
        {
          "name": "/authentication_other",
          "x-displayName": "other"
        }
      ],
      "paths": {
        "/adminapp": {
          "get": {
            "tags": [
              "/_Internal"
            ],
            "operationId": "generalSettings",
            "responses": {
              "default": {
                "description": "default response",
                "content": {
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "generalSettingsCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          }
        },
        "/adminapp/ui/tokens/generic/{id}": {
          "get": {
            "tags": [
              "/_Internal"
            ],
            "operationId": "genericTokenControllerUi",
            "responses": {
              "default": {
                "description": "default response",
                "content": {
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "genericTokenControllerUiCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/adminapp/user-detail": {
          "get": {
            "tags": [
              "/_Internal"
            ],
            "operationId": "userDetailSettings",
            "responses": {
              "default": {
                "description": "default response",
                "content": {
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "userDetailSettingsCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          }
        },
        "/adminapp/user-detail/{userId}": {
          "get": {
            "tags": [
              "/_Internal"
            ],
            "operationId": "userDetailSettings_1",
            "responses": {
              "default": {
                "description": "default response",
                "content": {
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "userDetailSettings_1CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/adminapp/user-management-extensions.js": {
          "get": {
            "tags": [
              "/_Internal"
            ],
            "operationId": "userManagementExtensions",
            "responses": {
              "default": {
                "description": "default response",
                "content": {
                  "text/javascript": {}
                }
              }
            }
          },
          "options": {
            "operationId": "userManagementExtensionsCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          }
        },
        "/my/password/change": {
          "post": {
            "tags": [
              "/_Password",
              "/_My"
            ],
            "summary": "Changes the administrator's password.",
            "operationId": "changePassword",
            "requestBody": {
              "description": "Contains the necessary data to change the password.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PasswordChangeRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "The password change was successful.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "<div class=\"iam-error-code\"><table>\n<tr>\n<td>EXISTING_PASSWORD_WRONG</td>\n<td>The existing password is wrong.</td>\n</tr>\n<tr>\n<td>PASSWORD_POLICY_VIOLATED</td>\n<td>The new password violates the password policy. See <a href=\"#passwordPolicyDetailCodes\">password policy violation detail codes</a>.</td>\n</tr>\n</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "changePasswordCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          }
        },
        "/license/activate": {
          "post": {
            "tags": [
              "/_License",
              "/_Internal"
            ],
            "summary": "Activates the license.",
            "operationId": "activateLicense",
            "requestBody": {
              "description": "Contains the license to activate.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LicenseUploadRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "License successfully activated.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "License could not be activated.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "activateLicenseCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          }
        },
        "/license": {
          "get": {
            "tags": [
              "/_License",
              "/_Internal"
            ],
            "summary": "Retrieves the active license.",
            "operationId": "retrieveLicense",
            "responses": {
              "200": {
                "description": "Retrieved the active license.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "There is no active license.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveLicenseCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          }
        },
        "/license/warnings": {
          "get": {
            "tags": [
              "/_License",
              "/_Internal"
            ],
            "summary": "Retrieves warnings of the active license.",
            "operationId": "retrieveWarnings",
            "responses": {
              "200": {
                "description": "Retrieved warnings of the active license.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "There is no active license yet.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveWarningsCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          }
        },
        "/license/validate": {
          "post": {
            "tags": [
              "/_License",
              "/_Internal"
            ],
            "summary": "Validates the license.",
            "operationId": "validateLicense",
            "requestBody": {
              "description": "Contains the license to validate.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LicenseUploadRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Validation was successful and retrieved optional warnings.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "Validation was not successful and retrieved the failures.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "validateLicenseCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          }
        },
        "/logs/{logKey}": {
          "get": {
            "tags": [
              "/_Logs",
              "/_Internal"
            ],
            "summary": "Retrieve the logs of a particular log file.",
            "operationId": "getLogs",
            "responses": {
              "200": {
                "description": "The response contains logs found.",
                "content": {
                  "text/plain": {},
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "Logfile name/key not found.",
                "content": {
                  "text/plain": {},
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "getLogsCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "filter",
              "in": "query",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "page[limit]",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "export",
              "in": "query",
              "description": "(optional) request for exporting the data in a particular format (currently supported: 'plaintext')",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page%5Boffset%5D",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page%5Blimit%5D",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page[size]",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page[offset]",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "logKey",
              "in": "path",
              "description": "The key of the log file as defined in the configuration.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page%5Bsize%5D",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "schema": {
                "pattern": "^(-?[^-,][^,]*(,-?[^-,][^,]*)*)?$",
                "type": "string"
              }
            }
          ]
        },
        "/maintenance-messages/{messageId}": {
          "get": {
            "tags": [
              "/_Maintenance Messages"
            ],
            "summary": "Retrieves a specific maintenance message.",
            "operationId": "retrieve",
            "responses": {
              "200": {
                "description": "Requested message found.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The message does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Maintenance Messages"
            ],
            "summary": "Deletes an existing maintenance message.",
            "operationId": "delete",
            "responses": {
              "204": {
                "description": "The message has been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The message does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "patch": {
            "tags": [
              "/_Maintenance Messages"
            ],
            "summary": "Updates a maintenance message.",
            "operationId": "update",
            "requestBody": {
              "description": "The document containing the attributes that should be updated. Omitted attributes are left unchanged.",
              "content": {
                "*/*": {
                  "schema": true
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "The maintenance message was updated successfully. The complete updated message is returned.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The requested maintenance message does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "parameters": [
            {
              "name": "messageId",
              "in": "path",
              "description": "The identification of the message.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/maintenance-messages": {
          "get": {
            "tags": [
              "/_Maintenance Messages"
            ],
            "summary": "Returns all maintenance messages.",
            "operationId": "retrieve_1",
            "responses": {
              "200": {
                "description": "The response contains a list of maintenance messages.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_Maintenance Messages"
            ],
            "summary": "Creates a new maintenance message.",
            "operationId": "create",
            "requestBody": {
              "description": "A request object with the maintenance message details.",
              "content": {
                "*/*": {
                  "schema": true
                }
              },
              "required": true
            },
            "responses": {
              "201": {
                "description": "A new maintenance message was created.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "409": {
                "description": "A maintenance message with the supplied identifier already exists.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieve_1CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "filter",
              "in": "query",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "sort",
              "in": "query",
              "schema": {
                "pattern": "^(-?[^-,][^,]*(,-?[^-,][^,]*)*)?$",
                "type": "string"
              }
            }
          ]
        },
        "/sms/{messageId}": {
          "get": {
            "tags": [
              "/_SMS"
            ],
            "summary": "Retrieves the delivery status of an SMS.",
            "operationId": "getDeliveryStatus",
            "responses": {
              "200": {
                "description": "On successful SMS delivery status retrieval.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "getDeliveryStatusCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "messageId",
              "in": "path",
              "description": "The message ID for which to retrieve the message's status.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/sms": {
          "post": {
            "tags": [
              "/_SMS"
            ],
            "summary": "Sends an SMS.",
            "operationId": "sendSms",
            "requestBody": {
              "description": "The request for sending an SMS.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentSmsSendRequest"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentSmsSendRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "201": {
                "description": "The SMS was sent successfully.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "204": {
                "description": "The SMS was sent successfully, but no tracking message ID is available.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The content of the send request is invalid (e.g. malformed phone number or originator).\nAn originator is only allowed and required if the configuration did not already define one.\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The SMS service is not configured.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "sendSmsCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          }
        },
        "/system": {
          "get": {
            "tags": [
              "/_System",
              "/_Internal"
            ],
            "summary": "Retrieves basic information about the system on which IAM is running.",
            "operationId": "retrieveSystemInfos",
            "responses": {
              "200": {
                "description": "Retrieved the available system information.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveSystemInfosCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          }
        },
        "/administrators/{adminId}/context-data": {
          "options": {
            "operationId": "updateContextDataCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "patch": {
            "tags": [
              "/_Administrator",
              "/_Context Data",
              "/_Internal"
            ],
            "summary": "Updates selective context data fields of this administrator.",
            "operationId": "updateContextData",
            "requestBody": {
              "description": "The document containing the attributes that should be updated. Omitted attributes are left unchanged.",
              "content": {
                "*/*": {
                  "schema": true
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "The response contains the context data fields of this administrator.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The administrator does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "parameters": [
            {
              "name": "adminId",
              "in": "path",
              "description": "The identification of the administrator.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/administrators/{adminId}/lock": {
          "get": {
            "tags": [
              "/_Administrator",
              "/_Locking",
              "/_Internal"
            ],
            "summary": "Retrieves information about the lock state of the administrator.",
            "operationId": "retrieveLockState",
            "responses": {
              "200": {
                "description": "Administrator is locked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "Administrator is not locked or does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_Administrator",
              "/_Locking",
              "/_Internal"
            ],
            "summary": "Locks the administrator.",
            "operationId": "lock",
            "requestBody": {
              "description": "The attributes required to lock an administrator.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AdminLockRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Administrator was already locked for the same reason.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "201": {
                "description": "Administrator got locked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid, e.g. using a lock reason that was not configured.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "403": {
                "description": "The administrator cannot be locked. This is possible when\nattempting to lock the last administrator that has superadmin rights.\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The administrator does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "409": {
                "description": "Administrator was already locked, but for a different reason.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Administrator",
              "/_Locking",
              "/_Internal"
            ],
            "summary": "Unlocks the administrator.",
            "operationId": "unlock",
            "responses": {
              "204": {
                "description": "Administrator was unlocked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "Administrator was not locked before (and is not now) or does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveLockStateCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "adminId",
              "in": "path",
              "description": "The identification of the administrator.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/IdentityAdministrator"
              }
            }
          ]
        },
        "/administrators/{adminId}/password": {
          "get": {
            "tags": [
              "/_Administrator",
              "/_Password",
              "/_Internal"
            ],
            "summary": "Retrieves password information.",
            "operationId": "getPasswordInformation",
            "responses": {
              "200": {
                "description": "Administrators's password information retrieved.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The administrator does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Administrator",
              "/_Password",
              "/_Internal"
            ],
            "summary": "Deletes the password.",
            "operationId": "deletePassword",
            "responses": {
              "204": {
                "description": "The password was deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The administrator does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "getPasswordInformationCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "adminId",
              "in": "path",
              "description": "The identification of the user.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/administrators/{adminId}/password/generate": {
          "post": {
            "tags": [
              "/_Password",
              "/_Internal"
            ],
            "summary": "Generates a new password for the administrator.",
            "operationId": "generatePassword",
            "responses": {
              "200": {
                "description": "The password generation request was successfully processed.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The administrator does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "generatePasswordCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "adminId",
              "in": "path",
              "description": "The identification of the administrator.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/administrators": {
          "get": {
            "tags": [
              "/_Administrator",
              "/_Internal"
            ],
            "summary": "Returns all administrators.",
            "operationId": "getAll",
            "responses": {
              "200": {
                "description": "The response contains all administrators.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_Administrator",
              "/_Internal"
            ],
            "summary": "Creates a new administrator.",
            "operationId": "create_1",
            "requestBody": {
              "description": "The data for creating an administrator.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentAdminCreateRequest"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentAdminCreateRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "201": {
                "description": "A new administrator was created.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "<div class=\"iam-error-code\"><table>\n<tr>\n<td>VALIDATION_FAILED</td>\n<td>The supplied attributes could not be validated successfully. See <a href=\"#validationFailures\">validation failures</a> for detail codes.</td>\n</tr>\n</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "409": {
                "description": "<div class=\"iam-error-code\"><table>\n<tr>\n<td>USER_NOT_UNIQUE</td>\n<td>The supplied username already exists.</td>\n</tr>\n</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "getAllCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          }
        },
        "/administrators/{adminId}": {
          "get": {
            "tags": [
              "/_Administrator",
              "/_Internal"
            ],
            "summary": "Retrieves the available information about an administrator.",
            "operationId": "retrieve_2",
            "responses": {
              "200": {
                "description": "Requested administrator found.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The administrator does not exist or cannot be retrieved with the current configuration.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Administrator",
              "/_Internal"
            ],
            "summary": "Deletes an existing administrator.",
            "operationId": "delete_1",
            "responses": {
              "204": {
                "description": "The administrator has been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "403": {
                "description": "The administrator cannot be deleted. This is possible when\nattempting to delete the last administrator that has superadmin rights.\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The administrator does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieve_2CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "adminId",
              "in": "path",
              "description": "The identification of the administrator.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/administrators/{adminId}/roles": {
          "get": {
            "tags": [
              "/_Administrator",
              "/_Roles",
              "/_Internal"
            ],
            "summary": "Retrieves the administrator's roles.",
            "operationId": "retrieveRoles",
            "responses": {
              "200": {
                "description": "Administrator roles retrieved.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The administrator does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "put": {
            "tags": [
              "/_Administrator",
              "/_Roles",
              "/_Internal"
            ],
            "summary": "Replaces the current roles with new ones.",
            "operationId": "setRoles",
            "requestBody": {
              "description": "Collection of new roles.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionDocumentRole"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionDocumentRole"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "201": {
                "description": "The specified roles were added to the administrator.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "Some roles are not modifiable by the current admin.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The administrator does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_Administrator",
              "/_Roles",
              "/_Internal"
            ],
            "summary": "Adds the specified role or a combination of roles to the administrator.",
            "operationId": "addRoleCombination",
            "requestBody": {
              "description": "A document containing a resource object where the 'id' is the name of the role to add.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentVoid"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentVoid"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "201": {
                "description": "The specified role was added to the administrator.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "204": {
                "description": "The administrator already had the specified role.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The administrator does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveRolesCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "adminId",
              "in": "path",
              "description": "The identification of the administrator.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/administrators/{adminId}/roles/{rolename}": {
          "get": {
            "tags": [
              "/_Administrator",
              "/_Roles",
              "/_Internal"
            ],
            "summary": "Checks if an administrator has the specific role.",
            "operationId": "retrieveRole",
            "responses": {
              "200": {
                "description": "The administrator has the specified role.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The administrator does not exist or does not have the specified role.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Administrator",
              "/_Roles",
              "/_Internal"
            ],
            "summary": "Removes the specified role or role combination from the administrator.",
            "operationId": "removeRoleCombination",
            "responses": {
              "204": {
                "description": "Removed the specified role from the administrator.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The administrator does not exist or does not have the role to be removed.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveRoleCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "rolename",
              "in": "path",
              "description": "The role to check.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "adminId",
              "in": "path",
              "description": "The identification of the administrator.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/api-keys/{apiKeyId}/lock": {
          "post": {
            "tags": [
              "/_Technical Client",
              "/_API key"
            ],
            "summary": "Locks the specified API key.",
            "operationId": "lockClient",
            "responses": {
              "200": {
                "description": "The API key was already locked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "201": {
                "description": "The API key has been locked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The API key does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Technical Client",
              "/_API key"
            ],
            "summary": "Unlocks the specified API key.",
            "operationId": "unlockClient",
            "responses": {
              "200": {
                "description": "The API key was already unlocked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "204": {
                "description": "The API key has been unlocked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The API key does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "lockClientCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "apiKeyId",
              "in": "path",
              "description": "The identification of the API key.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/IdentityApiKey"
              }
            }
          ]
        },
        "/api-keys": {
          "post": {
            "tags": [
              "/_Technical Client",
              "/_API Key"
            ],
            "summary": "Creates a new API key for the specified tech-client.",
            "operationId": "create_2",
            "requestBody": {
              "description": "A request containing API key attributes and a relationship to the associated technical client.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentApiKeyCreateRequest"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentApiKeyCreateRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "201": {
                "description": "A new API key has been created.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The related technical client does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "create_2CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          }
        },
        "/api-keys/{apiKeyId}": {
          "get": {
            "tags": [
              "/_Technical Client",
              "/_API Key"
            ],
            "summary": "Retrieves the specified API key.",
            "operationId": "retrieve_3",
            "responses": {
              "200": {
                "description": "The specified API key is returned.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The specified API key does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Technical Client",
              "/_API Key"
            ],
            "summary": "Deletes an existing API key.",
            "operationId": "delete_2",
            "responses": {
              "204": {
                "description": "The API key has been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The API key does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieve_3CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "patch": {
            "tags": [
              "/_Technical Client",
              "/_API Key"
            ],
            "summary": "Updates the specified API key.",
            "operationId": "updateApiKey",
            "requestBody": {
              "description": "The request containing API key attributes. Omitted attributes are left unchanged.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentApiKeyUpdateRequest"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentApiKeyUpdateRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "The API key was updated.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The API key does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "parameters": [
            {
              "name": "apiKeyId",
              "in": "path",
              "description": "The ID of the API key to be retrieved.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/IdentityApiKey"
              }
            }
          ]
        },
        "/plan-usages/{id}": {
          "delete": {
            "tags": [
              "/_Technical Client",
              "/_Plan Usage"
            ],
            "summary": "Deletes the specified Plan-Usage.",
            "operationId": "delete_3",
            "responses": {
              "204": {
                "description": "The Plan-Usage has been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The Plan-Usage does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "updatePlanUsageCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "patch": {
            "tags": [
              "/_Technical Client",
              "/_Plan Usage"
            ],
            "summary": "Updates the Plan-usage.",
            "operationId": "updatePlanUsage",
            "requestBody": {
              "description": "The request containing Plan-usage attributes. Omitted attributes are left unchanged.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentPlanUsageUpdateRequest"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentPlanUsageUpdateRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "The Plan-usage was updated.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The Plan-usage does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "409": {
                "description": "A Plan-usage with the given name does already exist for the associated subscription.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the Plan-usage.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/IdentityPlanUsage"
              }
            }
          ]
        },
        "/plan-usages": {
          "post": {
            "tags": [
              "/_Technical Client",
              "/_Plan Usage"
            ],
            "summary": "Creates a new Plan-Usage for the specified subscription.",
            "operationId": "create_3",
            "requestBody": {
              "description": "A request containing Plan-Usage attributes and a relationship to the associated subscription.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentPlanUsageCreateRequest"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentPlanUsageCreateRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "201": {
                "description": "A new Plan-Usage has been created.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The related subscription does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "409": {
                "description": "The associated subscription already has a Plan-Usage with the given name.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "create_3CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          }
        },
        "/subscriptions/{subscriptionId}/plan-usages": {
          "get": {
            "tags": [
              "/_Technical Client",
              "/_Subscription",
              "/_Plan Usage"
            ],
            "summary": "Retrieves all Plan-usages for the specified subscription.",
            "operationId": "retrievePlanUsages",
            "responses": {
              "200": {
                "description": "The response contains all Plan-usages.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The subscription does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrievePlanUsagesCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "subscriptionId",
              "in": "path",
              "description": "The identification of the subscription.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/IdentitySubscription"
              }
            }
          ]
        },
        "/subscriptions": {
          "post": {
            "tags": [
              "/_Technical Client",
              "/_Subscription"
            ],
            "summary": "Creates a new subscription for the specified tech-client.",
            "operationId": "create_4",
            "requestBody": {
              "description": "A request containing subscription attributes and a relationship to the associated tech-client.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentSubscriptionCreateRequest"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentSubscriptionCreateRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "201": {
                "description": "A new subscription has been created.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The related tech-client does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "409": {
                "description": "The associated tech-client already has a related subscription.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "create_4CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          }
        },
        "/tech-clients/{id}/lock": {
          "get": {
            "tags": [
              "/_Technical Client"
            ],
            "summary": "Retrieves information about the lock state of the specified technical client.",
            "operationId": "retrieveClientLockInfo",
            "responses": {
              "200": {
                "description": "The technical client is locked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The technical client is not locked or does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_Technical Client"
            ],
            "summary": "Locks the specified technical client.",
            "operationId": "lockClient_1",
            "requestBody": {
              "description": "The attributes required to lock a technical client.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PlainTechClientLockRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "The technical client was already locked. The lock reason may have been updated.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "201": {
                "description": "The technical client has been locked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The technical client does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "409": {
                "description": "The technical client was already locked, but for a different reason.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Technical Client"
            ],
            "summary": "Unlocks the specified technical client.",
            "operationId": "unlockClient_1",
            "responses": {
              "204": {
                "description": "The technical client has been unlocked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The technical client does not exist or is not locked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveClientLockInfoCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The identification of the technical client.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/tech-clients/{id}": {
          "get": {
            "tags": [
              "/_Technical Client"
            ],
            "summary": "Retrieves the specified technical client.",
            "operationId": "retrieveClient",
            "responses": {
              "200": {
                "description": "The response contains the specified technical client.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The technical client does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Technical Client"
            ],
            "summary": "Deletes the specified technical client.",
            "operationId": "deleteClient",
            "responses": {
              "204": {
                "description": "The technical client has been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The technical client does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveClientCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "patch": {
            "tags": [
              "/_Technical Client"
            ],
            "summary": "Updates the specified technical client.",
            "operationId": "updateClient",
            "requestBody": {
              "description": "The document containing the attributes that should be updated. Omitted attributes are left unchanged.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentPlainTechClientUpdateRequest"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentPlainTechClientUpdateRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "The technical client was updated successfully. The complete updated technical client is returned.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The requested technical client does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The identification of the technical client.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/tech-clients/{id}/api-keys": {
          "get": {
            "tags": [
              "/_Technical Client",
              "/_API Key"
            ],
            "summary": "Retrieves all API keys for the specified technical client.",
            "operationId": "retrieveApiKeys",
            "responses": {
              "200": {
                "description": "The response contains all API keys.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The technical client does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveApiKeysCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The identification of the technical client.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/tech-clients/{id}/subscription": {
          "get": {
            "tags": [
              "/_Technical Client",
              "/_Subscription"
            ],
            "summary": "Retrieves the subscription for the specified technical client.",
            "operationId": "retrieveSubscription",
            "responses": {
              "200": {
                "description": "The subscription or <tt>null</tt> as primary data if none exists.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The technical client does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveSubscriptionCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The identification of the technical client.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/tech-clients": {
          "get": {
            "tags": [
              "/_Technical Client"
            ],
            "summary": "Retrieves the list of all technical clients.",
            "operationId": "retrieveAllClients",
            "responses": {
              "200": {
                "description": "The response contains all technical clients.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_Technical Client"
            ],
            "summary": "Creates a new technical client.",
            "operationId": "createClient",
            "requestBody": {
              "description": "The attributes required to create a technical client.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentPlainTechClientCreateRequest"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentPlainTechClientCreateRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "201": {
                "description": "The technical client was created.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveAllClientsCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "filter",
              "in": "query",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "page[limit]",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page%5Boffset%5D",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page%5Blimit%5D",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page[size]",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page[offset]",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page%5Bsize%5D",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "schema": {
                "pattern": "^(-?[^-,][^,]*(,-?[^-,][^,]*)*)?$",
                "type": "string"
              }
            }
          ]
        },
        "/tokens/airlock-2fa/hardware-tokens/{tokenId}": {
          "delete": {
            "tags": [
              "/_Airlock 2FA"
            ],
            "summary": "Archives an Airlock 2FA hardware token.",
            "operationId": "archiveHardwareToken",
            "responses": {
              "204": {
                "description": "The hardware token has been archived or was already archived.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "403": {
                "description": "The hardware token is assigned to a different service within the organization.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The hardware token was not found.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "archiveHardwareTokenCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "tokenId",
              "in": "path",
              "description": "The ID of the hardware token to be archived.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/tokens/airlock-2fa/hardware-tokens": {
          "get": {
            "tags": [
              "/_Airlock 2FA"
            ],
            "summary": "Retrieves all Airlock 2FA hardware tokens.",
            "operationId": "retrieveHardwareTokens",
            "responses": {
              "200": {
                "description": "Retrieved Airlock 2FA tokens.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveHardwareTokensCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "page[limit]",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "page%5Boffset%5D",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page%5Blimit%5D",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page[size]",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page[offset]",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page%5Bsize%5D",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ]
        },
        "/tokens/airlock-2fa/hardware-tokens/{tokenId}/synchronize": {
          "post": {
            "tags": [
              "/_Airlock 2FA"
            ],
            "summary": "Synchronizes the given hardware token with the backend.",
            "operationId": "synchronizeHardwareToken",
            "requestBody": {
              "description": "The request containing the two subsequent passcodes required for synchronization.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SynchronizeAirlock2FAHardwareTokenRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "The hardware token has been successfully synchronized.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid, the specified token does not support <tt>PASSCODE</tt> or the token could\nnot be synchronized.\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "403": {
                "description": "The hardware token is archived or assigned to a different service within the organization.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The hardware token was not found.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "synchronizeHardwareTokenCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "tokenId",
              "in": "path",
              "description": "The ID of the hardware token to be synchronized.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/tokens/vasco-cronto/license": {
          "get": {
            "tags": [
              "/_Vasco",
              "/_Internal"
            ],
            "summary": "Returns information about Vasco Cronto licenses.",
            "operationId": "getCrontoLicenseInfo",
            "responses": {
              "200": {
                "description": "The license information could be retrieved.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "getCrontoLicenseInfoCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          }
        },
        "/tokens/vasco-otp/license": {
          "get": {
            "tags": [
              "/_Vasco",
              "/_Internal"
            ],
            "summary": "Returns information about Vasco OTP licenses.",
            "operationId": "getOtpLicenseInfo",
            "responses": {
              "200": {
                "description": "The license information could be retrieved.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "getOtpLicenseInfoCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          }
        },
        "/tokens/vasco-cronto/license/import": {
          "post": {
            "tags": [
              "/_Vasco"
            ],
            "summary": "Import a Vasco license file for Cronto accounts.",
            "operationId": "importCrontoLicense",
            "requestBody": {
              "description": "The license file.",
              "content": {
                "*/*": {
                  "schema": true
                }
              }
            },
            "responses": {
              "201": {
                "description": "The import was successful.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "Wrong type or other failure.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "importCrontoLicenseCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          }
        },
        "/tokens/vasco-otp/license/import": {
          "post": {
            "tags": [
              "/_Vasco"
            ],
            "summary": "Import a Vasco license file for OTP devices.",
            "operationId": "importOtpLicense",
            "requestBody": {
              "description": "The license file.",
              "content": {
                "*/*": {
                  "schema": true
                }
              }
            },
            "responses": {
              "204": {
                "description": "The import was successful.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "Wrong type or other failure.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "importOtpLicenseCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          }
        },
        "/tokens/vasco-otp/devices/{deviceId}": {
          "get": {
            "tags": [
              "/_Vasco"
            ],
            "summary": "Retrieves a specific Vasco device by ID.",
            "operationId": "retrieveDevice",
            "responses": {
              "200": {
                "description": "Retrieved Vasco device.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The device with the given ID does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Vasco"
            ],
            "summary": "Deletes a Vasco device.",
            "operationId": "deleteDevice",
            "responses": {
              "204": {
                "description": "The device has been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid or the device cannot be deleted.\nbecause it is still assigned to at least one user.\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The device with the given ID does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveDeviceCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "patch": {
            "tags": [
              "/_Vasco"
            ],
            "summary": "Updates a Vasco device.",
            "operationId": "updateDevice",
            "requestBody": {
              "description": "The attributes to be updated.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentVascoDevicePatchData"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentVascoDevicePatchData"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "The device has been updated accordingly.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The device with the given ID does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "parameters": [
            {
              "name": "deviceId",
              "in": "path",
              "description": "The ID of the requested device.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/tokens/vasco-otp/devices/{deviceId}/enable": {
          "post": {
            "tags": [
              "/_Vasco"
            ],
            "summary": "Enables a Vasco device.",
            "operationId": "enableDevice",
            "responses": {
              "204": {
                "description": "The device has been enabled.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The device with the given ID does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Vasco"
            ],
            "summary": "Disables a Vasco device.",
            "operationId": "disableDevice",
            "responses": {
              "204": {
                "description": "The device has been disabled.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The device with the given ID does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "enableDeviceCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "deviceId",
              "in": "path",
              "description": "The ID of the requested device.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/tokens/vasco-otp/devices": {
          "get": {
            "tags": [
              "/_Vasco"
            ],
            "summary": "Retrieves all Vasco devices.",
            "operationId": "retrieveDevices",
            "responses": {
              "200": {
                "description": "Retrieved Vasco devices.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveDevicesCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "page[limit]",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "page%5Boffset%5D",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page%5Blimit%5D",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page[size]",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page[offset]",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "noLimit",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "page%5Bsize%5D",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ]
        },
        "/tokens/vasco-otp/devices/{deviceId}/synchronize": {
          "post": {
            "tags": [
              "/_Vasco"
            ],
            "summary": "Synchronizes a Vasco device.",
            "operationId": "synchronize",
            "requestBody": {
              "description": "Contains the OTPs for synchronization.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SynchronizeVascoTokenRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "Synchronization successful.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid or the OTPs were incorrect.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The device with the given ID does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "synchronizeCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "deviceId",
              "in": "path",
              "description": "The ID of the device.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/account-links": {
          "get": {
            "tags": [
              "/_Account Linking"
            ],
            "summary": "Retrieves account links of the user.",
            "operationId": "listAccountLinks",
            "responses": {
              "200": {
                "description": "Retrieved account links.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "listAccountLinksCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/account-links/{id}": {
          "delete": {
            "tags": [
              "/_Account Linking"
            ],
            "summary": "Removes the account link identified by the provider ID.",
            "operationId": "remove",
            "responses": {
              "204": {
                "description": "The account link was removed.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user or account link was not found.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "removeCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "The provider ID of the account link to be removed.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/context-data": {
          "get": {
            "tags": [
              "/_Context Data"
            ],
            "summary": "Get configured context data fields of this user.",
            "operationId": "getContextData",
            "responses": {
              "200": {
                "description": "The response contains the context data fields of this user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "getContextDataCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "patch": {
            "tags": [
              "/_Context Data"
            ],
            "summary": "Updates selective context data fields of this user.",
            "operationId": "updateContextData_1",
            "requestBody": {
              "description": "The document containing the attributes that should be updated. Omitted attributes are left unchanged.",
              "content": {
                "*/*": {
                  "schema": true
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "The response contains the context data fields of this user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "403": {
                "description": "The user is not editable.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/lock": {
          "get": {
            "tags": [
              "/_Locking"
            ],
            "summary": "Retrieves information about the lock state of the user.",
            "operationId": "retrieveLockState_1",
            "responses": {
              "200": {
                "description": "User is locked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "User is not locked or does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_Locking"
            ],
            "summary": "Locks the user.",
            "operationId": "setLockState",
            "requestBody": {
              "description": "The attributes required to lock a user.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserLockRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "User was already locked for the same reason.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "201": {
                "description": "User got locked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "409": {
                "description": "User was already locked, but for a different reason.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Locking"
            ],
            "summary": "Unlocks the user.",
            "operationId": "unlockUser",
            "responses": {
              "204": {
                "description": "User was unlocked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "User was not locked before (and is not now) or does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveLockState_1CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/logs/usertrail": {
          "get": {
            "tags": [
              "/_Logs",
              "/_Internal"
            ],
            "summary": "Retrieve the user trail log of a particular user.",
            "operationId": "getUsertrailLogs",
            "responses": {
              "200": {
                "description": "The response contains logs found.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "getUsertrailLogsCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page[limit]",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page%5Boffset%5D",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page%5Blimit%5D",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page[size]",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page[offset]",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page%5Bsize%5D",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ]
        },
        "/users/{userId}/tokens/oauth2": {
          "delete": {
            "tags": [
              "/_OAuth 2.0"
            ],
            "summary": "Deletes the user's OAuth 2.0 Tokens.",
            "operationId": "deleteOAuth2Tokens",
            "responses": {
              "204": {
                "description": "The tokens have been deleted successfully.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "deleteOAuth2TokensCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/remember-me": {
          "get": {
            "tags": [
              "/_Remember-Me",
              "/_Internal"
            ],
            "summary": "Retrieves information about the user's remember-me cookies.",
            "operationId": "rememberMeSecrets",
            "responses": {
              "200": {
                "description": "The user has remember-me cookies.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have remember-me cookies.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Remember-Me"
            ],
            "summary": "Invalidates the remember-me cookies for a specific user.",
            "operationId": "deleteRememberMeCookies",
            "responses": {
              "204": {
                "description": "The cookies have been invalidated successfully.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "<div class=\"iam-error-code\"><table>\n<tr>\n<td>ITEM_NOT_FOUND</td>\n<td>The user does not have any remember-me cookies.</td>\n</tr>\n<tr>\n<td>USER_NOT_FOUND</td>\n<td>The user does not exist.</td>\n</tr>\n</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "rememberMeSecretsCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/username/change": {
          "post": {
            "summary": "Changes the username (identity) of the user.",
            "operationId": "changeUsername",
            "requestBody": {
              "description": "Contains the new desired username.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ChangeUsernameRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Username was successfully changed.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "403": {
                "description": "The user is not editable.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "options": {
            "operationId": "changeUsernameCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}": {
          "get": {
            "summary": "Retrieves the available information about a user.",
            "operationId": "retrieve_4",
            "responses": {
              "200": {
                "description": "Requested user found.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or cannot be retrieved with the current configuration.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "delete": {
            "summary": "Deletes an existing user.",
            "operationId": "delete_4",
            "responses": {
              "204": {
                "description": "The user has been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "403": {
                "description": "The user is not editable.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "options": {
            "operationId": "retrieve_4CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/roles": {
          "get": {
            "tags": [
              "/_Roles"
            ],
            "summary": "Retrieves the user roles.",
            "operationId": "retrieveRoles_1",
            "responses": {
              "200": {
                "description": "User roles retrieved.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "put": {
            "tags": [
              "/_Roles",
              "/_Internal"
            ],
            "summary": "Replaces all roles with the new ones.",
            "operationId": "updateRoles",
            "requestBody": {
              "description": "Collection of new roles.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionDocumentRole"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionDocumentRole"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "201": {
                "description": "The specified role was added to the user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "204": {
                "description": "The user already had the specified role.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "Some roles are not modifiable by the current admin.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "403": {
                "description": "The user is not editable.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_Roles"
            ],
            "summary": "Adds the specified role to the user.",
            "operationId": "addRole",
            "requestBody": {
              "description": "A document containing a resource object where the 'id' is the name of the role to add.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentVoid"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentVoid"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "201": {
                "description": "The specified role was added to the user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "204": {
                "description": "The user already had the specified role.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "403": {
                "description": "The user is not editable.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveRoles_1CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/roles/{rolename}": {
          "get": {
            "tags": [
              "/_Roles"
            ],
            "summary": "Checks if a user has the specific role.",
            "operationId": "retrieveRole_1",
            "responses": {
              "200": {
                "description": "The user has the specified role.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have the specified role.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Roles"
            ],
            "summary": "Removes the specified role from the user.",
            "operationId": "removeRole",
            "responses": {
              "204": {
                "description": "Removed the specified role from the user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "403": {
                "description": "The user is not editable.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have the\nrole to be removed.\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveRole_1CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "rolename",
              "in": "path",
              "description": "The role to check.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/statistics": {
          "get": {
            "tags": [
              "/_Statistics"
            ],
            "summary": "Retrieves user statistics.",
            "operationId": "retrieveStatistics",
            "responses": {
              "200": {
                "description": "The response contains the requested user statistics.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveStatisticsCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/temporary-lock": {
          "get": {
            "tags": [
              "/_Locking"
            ],
            "summary": "Retrieves information about the temporary lock state of the user.",
            "operationId": "retrieveTemporaryLockState",
            "responses": {
              "200": {
                "description": "User is temporarily locked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "User is not temporarily locked or does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveTemporaryLockStateCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/validity/enable": {
          "post": {
            "tags": [
              "/_Validity"
            ],
            "summary": "Enables the user.",
            "operationId": "enable",
            "responses": {
              "204": {
                "description": "The user has been enabled.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "403": {
                "description": "The user is not editable.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Validity"
            ],
            "summary": "Disables the user.",
            "operationId": "disable",
            "responses": {
              "204": {
                "description": "The user has been disabled.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "403": {
                "description": "The user is not editable.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "enableCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/validity/from": {
          "post": {
            "tags": [
              "/_Validity"
            ],
            "summary": "Sets the 'from' date of a user validity period.",
            "operationId": "setValidFrom",
            "requestBody": {
              "description": "Contains the date from which the user is valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserValidityFromRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "The user's validity period 'from' date has been created.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "403": {
                "description": "The user is not editable.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Validity"
            ],
            "summary": "Deletes the 'from' date of a user validity period.",
            "operationId": "resetValidFrom",
            "responses": {
              "204": {
                "description": "The user's validity period 'from' date has been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "403": {
                "description": "The user is not editable.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "setValidFromCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/validity": {
          "get": {
            "tags": [
              "/_Validity"
            ],
            "summary": "Retrieves information about the validity of a user account.",
            "operationId": "retrieve_5",
            "responses": {
              "200": {
                "description": "The response contains a representation of the user's validity.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieve_5CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "patch": {
            "tags": [
              "/_Validity",
              "/_Internal"
            ],
            "summary": "Updates the validity period of this user.",
            "operationId": "updateValidityPeriod",
            "requestBody": {
              "description": "The jsonapi document containing the new validity period.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentUserValidityPeriodRequest"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentUserValidityPeriodRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "The response contains the updated validity period.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "403": {
                "description": "The user is not editable.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/validity/until": {
          "post": {
            "tags": [
              "/_Validity"
            ],
            "summary": "Sets the 'until' date of a user validity period.",
            "operationId": "setValidUntil",
            "requestBody": {
              "description": "Contains the date until the user will be valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserValidityUntilRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "The user's validity period 'until' date has been created.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "403": {
                "description": "The user is not editable.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Validity"
            ],
            "summary": "Deletes the 'until' date of a user validity period.",
            "operationId": "resetValidUntil",
            "responses": {
              "204": {
                "description": "The user's validity period 'until' date has been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "403": {
                "description": "The user is not editable.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "setValidUntilCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users": {
          "get": {
            "summary": "Reads a page with users.",
            "operationId": "retrieve_6",
            "responses": {
              "200": {
                "description": "The response contains a page of users.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "post": {
            "summary": "Creates a new user.",
            "operationId": "create_5",
            "requestBody": {
              "description": "A request object with the desired username (data.id), password and context data.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentUserCreateRequest"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentUserCreateRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "201": {
                "description": "A new user was created.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "<div class=\"iam-error-code\"><table>\n<tr>\n<td>PASSWORD_POLICY_VIOLATED</td>\n<td>The password violates the password policy. See <a href=\"#passwordPolicyDetailCodes\">password policy violation detail codes</a>.</td>\n</tr>\n</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "403": {
                "description": "The user is not editable.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "409": {
                "description": "<div class=\"iam-error-code\"><table>\n<tr>\n<td>USER_NOT_UNIQUE</td>\n<td>The supplied username already exists.</td>\n</tr>\n</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "options": {
            "operationId": "retrieve_6CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "page[limit]",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "page%5Boffset%5D",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page%5Blimit%5D",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page[size]",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "page[offset]",
              "in": "query",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "caseSensitive",
              "in": "query",
              "description": "(optional) whether the search is case sensitive or not. If not set,",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "export",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page%5Bsize%5D",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "schema": {
                "pattern": "^(-?[^-,][^,]*(,-?[^-,][^,]*)*)?$",
                "type": "string"
              }
            }
          ]
        },
        "/bulk-changes/user/token/migration/{migrationId}": {
          "get": {
            "tags": [
              "/_Token Migration Bulk Change",
              "/_Internal"
            ],
            "summary": "Returns the state of the token migration bulk change.",
            "operationId": "getMigrationState",
            "responses": {
              "200": {
                "description": "The response containing the state of the bulk change.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "If no such bulk change exists.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "getMigrationStateCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "migrationId",
              "in": "path",
              "description": "The ID of the migration for which to retrieve the state.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/IdentityBulkTokenMigrationStatus"
              }
            }
          ]
        },
        "/bulk-changes/user/token/migration": {
          "post": {
            "tags": [
              "/_Token Migration Bulk Change",
              "/_Internal"
            ],
            "summary": "Starts a token migration bulk change.",
            "operationId": "startTokenMigrationBulkChange",
            "requestBody": {
              "description": "The data for starting a token migration bulk change.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/BulkTokenMigrationData"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BulkTokenMigrationData"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "201": {
                "description": "A new bulk change was started.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "startTokenMigrationBulkChangeCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          }
        },
        "/users/{userId}/oauth2/consent/authorization-servers": {
          "get": {
            "summary": "Retrieves the OAuth 2.0 authorization servers and their respective OAuth 2.0 clients a user has consent decisions stored for.",
            "operationId": "getAuthorizationServers",
            "responses": {
              "200": {
                "description": "The response contains a collection of authorization servers with their respective client IDs. This\ncollection may be empty if the user has no consents stored.\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "<div class=\"iam-error-code\"><table>\n<tr>\n<td>USER_NOT_FOUND</td>\n<td>The user does not exist.</td>\n</tr>\n</table></div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "options": {
            "operationId": "getAuthorizationServersCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/oauth2/consents/{consentId}": {
          "delete": {
            "summary": "Deletes the consent identified by the given consent ID.",
            "operationId": "delete_5",
            "responses": {
              "204": {
                "description": "The consent has been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have a consent with the given ID.\n<div class=\"iam-error-code\"><table>\n<tr>\n<td>USER_NOT_FOUND</td>\n<td>The user does not exist.</td>\n</tr>\n</table></div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "options": {
            "operationId": "delete_5CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "consentId",
              "in": "path",
              "description": "The ID of the consent to delete.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/oauth2/consents": {
          "get": {
            "summary": "Retrieves the OAuth 2.0 consent decisions a user has stored.",
            "operationId": "getConsents",
            "responses": {
              "200": {
                "description": "The response contains a collection of consents. This collection may be empty, e.g. if the user\nhas no consents stored or none of the consents match the filter criteria.\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "<div class=\"iam-error-code\"><table>\n<tr>\n<td>USER_NOT_FOUND</td>\n<td>The user does not exist.</td>\n</tr>\n</table></div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "options": {
            "operationId": "getConsentsCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ]
        },
        "/users/{userId}/tokens/generic/{tokenType}": {
          "get": {
            "tags": [
              "/_Generic Token"
            ],
            "summary": "Retrieves all generic tokens of the given type for the specified user.",
            "operationId": "retrieveTokens",
            "responses": {
              "200": {
                "description": "Retrieved all generic tokens.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_Generic Token"
            ],
            "summary": "Creates a new generic token of the given type.",
            "operationId": "addToken",
            "requestBody": {
              "description": "Attributes of the token to be created.",
              "content": {
                "*/*": {
                  "schema": true
                }
              },
              "required": true
            },
            "responses": {
              "201": {
                "description": "Generic token created.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid or token not added because max token count reached.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveTokensCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "tokenType",
              "in": "path",
              "description": "The type of this token.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/generic/{tokenType}/{tokenId}": {
          "get": {
            "tags": [
              "/_Generic Token"
            ],
            "summary": "Retrieves a specific generic token by ID.",
            "operationId": "retrieveToken",
            "responses": {
              "200": {
                "description": "Retrieved the specified token.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or there is no token with this ID.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Generic Token"
            ],
            "summary": "Deletes a user's generic token.",
            "operationId": "deleteToken",
            "responses": {
              "204": {
                "description": "The token has been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or there is no token with this ID.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveTokenCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "patch": {
            "tags": [
              "/_Generic Token"
            ],
            "summary": "Updates properties on a generic token.",
            "operationId": "updateToken",
            "requestBody": {
              "description": "The document containing the attributes that should be updated. Omitted attributes are left unchanged.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentGenericTokenDataRequest"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentGenericTokenDataRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "The token was updated successfully. The complete updated token is returned.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or there is no token with this ID.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tokenId",
              "in": "path",
              "description": "The ID of the requested token.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tokenType",
              "in": "path",
              "description": "The type of the requested token.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/generic/{tokenType}/{tokenId}/enable": {
          "post": {
            "tags": [
              "/_Generic Token"
            ],
            "summary": "Enables a generic token.",
            "operationId": "enableToken",
            "responses": {
              "204": {
                "description": "The token has been enabled.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or there is no token with this ID.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Generic Token"
            ],
            "summary": "Disables a generic token.",
            "operationId": "disableToken",
            "responses": {
              "204": {
                "description": "The token has been disabled.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or there is no token with this ID.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "enableTokenCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tokenType",
              "in": "path",
              "description": "The type of the token to be enabled.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tokenId",
              "in": "path",
              "description": "The ID of the requested token.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/generic/{tokenType}/activation-letters/order": {
          "get": {
            "tags": [
              "/_Generic Token"
            ],
            "summary": "Retrieves the activation letter order status.",
            "operationId": "retrieveActivationLetterOrderStatus",
            "responses": {
              "200": {
                "description": "Retrieved the activation letter order status.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_Generic Token"
            ],
            "summary": "Orders a new activation letter.",
            "operationId": "orderActivationLetter",
            "responses": {
              "204": {
                "description": "A new activation letter has been ordered.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "An activation letter is already ordered.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Generic Token"
            ],
            "summary": "Cancels the order of an activation letter.",
            "operationId": "unorderActivationLetter",
            "responses": {
              "204": {
                "description": "The order has been cancelled.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "No activation letter is currently ordered.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveActivationLetterOrderStatusCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tokenType",
              "in": "path",
              "description": "The type of the token.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/airlock-2fa": {
          "get": {
            "tags": [
              "/_Airlock 2FA"
            ],
            "summary": "Retrieves the Airlock 2FA account of the user.",
            "operationId": "getAccount",
            "responses": {
              "200": {
                "description": "Retrieved Airlock 2FA account.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": " <div class=\"iam-error-code\">\n     <table>\n         <tr>\n  \t\t\t<td>ACCOUNT_NOT_FOUND</td>\n  \t\t\t<td>The user has no Airlock 2FA account.</td>\n  \t\t</tr>\n  \t\t<tr>\n  \t\t\t<td>USER_NOT_FOUND</td>\n  \t\t\t<td>The user does not exist.</td>\n  \t\t</tr>\n  \t</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_Airlock 2FA"
            ],
            "summary": "Creates a new Airlock 2FA account for the user.",
            "operationId": "createAccount",
            "responses": {
              "201": {
                "description": "The account has been created for this user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "409": {
                "description": "The user already has an Airlock2FA account.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Airlock 2FA"
            ],
            "summary": "Deletes the Airlock 2FA account of the user.",
            "operationId": "deleteAccount",
            "responses": {
              "204": {
                "description": "The account was deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": " <div class=\"iam-error-code\">\n     <table>\n         <tr>\n  \t\t\t<td>ACCOUNT_NOT_FOUND</td>\n  \t\t\t<td>The user has no Airlock 2FA account.</td>\n  \t\t</tr>\n  \t\t<tr>\n  \t\t\t<td>USER_NOT_FOUND</td>\n  \t\t\t<td>The user does not exist.</td>\n  \t\t</tr>\n  \t</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "getAccountCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/airlock-2fa/activation-letters": {
          "get": {
            "tags": [
              "/_Airlock 2FA"
            ],
            "summary": "Retrieves the pending activation letters of an Airlock 2FA account.",
            "operationId": "getActivationLetters",
            "responses": {
              "200": {
                "description": "Retrieved Airlock 2FA activation letters.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "<div class=\"iam-error-code\">\n   <table>\n       <tr>\n\t\t\t<td>ACCOUNT_NOT_FOUND</td>\n\t\t\t<td>The user has no Airlock 2FA account and therefore no activation letters.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>USER_NOT_FOUND</td>\n\t\t\t<td>The user does not exist.</td>\n\t\t</tr>\n\t</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_Airlock 2FA"
            ],
            "summary": "Creates a new Airlock 2FA activation letter.",
            "operationId": "createActivationLetter",
            "responses": {
              "201": {
                "description": "A new activation letter has been created.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "<div class=\"iam-error-code\">\n   <table>\n       <tr>\n\t\t\t<td>ACCOUNT_NOT_FOUND</td>\n\t\t\t<td>The user has no Airlock 2FA account and therefore no activation letter can be created.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>USER_NOT_FOUND</td>\n\t\t\t<td>The user does not exist.</td>\n\t\t</tr>\n\t</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "getActivationLettersCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/airlock-2fa/activation-letter-orders": {
          "get": {
            "tags": [
              "/_Airlock 2FA"
            ],
            "summary": "Retrieves the activation letter orders of an Airlock 2FA account.",
            "operationId": "getActivationLetterOrders",
            "responses": {
              "200": {
                "description": "Retrieved Airlock 2FA activation letter orders.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "<div class=\"iam-error-code\">\n   <table>\n       <tr>\n\t\t\t<td>ACCOUNT_NOT_FOUND</td>\n\t\t\t<td>The user has no Airlock 2FA account and therefore no activation letters.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>USER_NOT_FOUND</td>\n\t\t\t<td>The user does not exist.</td>\n\t\t</tr>\n\t</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_Airlock 2FA"
            ],
            "summary": "Creates a new Airlock 2FA activation letter order.",
            "operationId": "createActivationLetterOrder",
            "responses": {
              "201": {
                "description": "A new activation letter order has been created.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "<div class=\"iam-error-code\">\n   <table>\n       <tr>\n\t\t\t<td>ACCOUNT_NOT_FOUND</td>\n\t\t\t<td>The user has no Airlock 2FA account and therefore no activation letter can be created.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>USER_NOT_FOUND</td>\n\t\t\t<td>The user does not exist.</td>\n\t\t</tr>\n\t</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "409": {
                "description": "An activation letter order for this user already exists.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "getActivationLetterOrdersCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/airlock-2fa/hardware-devices/{deviceId}/shipment-letters": {
          "post": {
            "tags": [
              "/_Airlock 2FA"
            ],
            "summary": "Creates a new shipment letter to accompany the hardware token to the end-user.",
            "operationId": "createShipmentLetter",
            "responses": {
              "201": {
                "description": "A new shipment letter has been created.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "<div class=\"iam-error-code\">\n   <table>\n       <tr>\n\t\t\t<td>ACCOUNT_NOT_FOUND</td>\n\t\t\t<td>The user has no Airlock 2FA account and therefore no activation letter can be created.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>USER_NOT_FOUND</td>\n\t\t\t<td>The user does not exist.</td>\n\t\t</tr>\n\t</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "createShipmentLetterCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "deviceId",
              "in": "path",
              "description": "The ID of hardware device.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/airlock-2fa/activation-letters/{letterId}": {
          "delete": {
            "tags": [
              "/_Airlock 2FA"
            ],
            "summary": "Deletes an Airlock 2FA activation letter.",
            "operationId": "deleteActivationLetter",
            "responses": {
              "204": {
                "description": "The activation letter has been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "No activation letter with this ID exists for this user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "deleteActivationLetterCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "letterId",
              "in": "path",
              "description": "The identifier of the activation letter to be deleted.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/airlock-2fa/activation-letter-orders/{orderId}": {
          "delete": {
            "tags": [
              "/_Airlock 2FA"
            ],
            "summary": "Deletes an Airlock 2FA activation letter order.",
            "operationId": "deleteActivationLetterOrder",
            "responses": {
              "204": {
                "description": "The order was deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": " <div class=\"iam-error-code\">\n     <table>\n         <tr>\n  \t\t\t<td>ACCOUNT_NOT_FOUND</td>\n  \t\t\t<td>The user has no Airlock 2FA account.</td>\n  \t\t</tr>\n  \t\t<tr>\n  \t\t\t<td>USER_NOT_FOUND</td>\n  \t\t\t<td>The user does not exist.</td>\n  \t\t</tr>\n  \t</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "deleteActivationLetterOrderCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "orderId",
              "in": "path",
              "description": "The identification of the activation letter order.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/airlock-2fa/app-devices": {
          "get": {
            "tags": [
              "/_Airlock 2FA"
            ],
            "summary": "Retrieves the Airlock 2FA app devices of the user.",
            "operationId": "getAppDevices",
            "responses": {
              "200": {
                "description": "Retrieved Airlock 2FA app devices.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "<div class=\"iam-error-code\">\n   <table>\n       <tr>\n\t\t\t<td>ACCOUNT_NOT_FOUND</td>\n\t\t\t<td>The user has no Airlock 2FA account and therefore no app devices.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>USER_NOT_FOUND</td>\n\t\t\t<td>The user does not exist.</td>\n\t\t</tr>\n\t</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "getAppDevicesCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/airlock-2fa/hardware-devices": {
          "get": {
            "tags": [
              "/_Airlock 2FA"
            ],
            "summary": "Retrieves the Airlock 2FA hardware devices of the user.",
            "operationId": "getHardwareDevices",
            "responses": {
              "200": {
                "description": "Retrieved Airlock 2FA app devices.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "<div class=\"iam-error-code\">\n   <table>\n       <tr>\n\t\t\t<td>ACCOUNT_NOT_FOUND</td>\n\t\t\t<td>The user has no Airlock 2FA account and therefore no app devices.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>USER_NOT_FOUND</td>\n\t\t\t<td>The user does not exist.</td>\n\t\t</tr>\n\t</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "getHardwareDevicesCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/airlock-2fa/lock": {
          "post": {
            "tags": [
              "/_Airlock 2FA"
            ],
            "summary": "Locks the Airlock 2FA account.",
            "operationId": "lockAccount",
            "responses": {
              "200": {
                "description": "The account was already locked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "201": {
                "description": "The account has been locked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid or the user is disabled and cannot be locked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": " <div class=\"iam-error-code\">\n     <table>\n         <tr>\n  \t\t\t<td>ACCOUNT_NOT_FOUND</td>\n  \t\t\t<td>The user has no Airlock 2FA account.</td>\n  \t\t</tr>\n  \t\t<tr>\n  \t\t\t<td>USER_NOT_FOUND</td>\n  \t\t\t<td>The user does not exist.</td>\n  \t\t</tr>\n  \t</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Airlock 2FA"
            ],
            "summary": "Unlocks the Airlock 2FA account.",
            "operationId": "unlockAccount",
            "responses": {
              "200": {
                "description": "The account was already unlocked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "204": {
                "description": "The account has been unlocked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid or the user is disabled and cannot be unlocked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": " <div class=\"iam-error-code\">\n     <table>\n         <tr>\n  \t\t\t<td>ACCOUNT_NOT_FOUND</td>\n  \t\t\t<td>The user has no Airlock 2FA account.</td>\n  \t\t</tr>\n  \t\t<tr>\n  \t\t\t<td>USER_NOT_FOUND</td>\n  \t\t\t<td>The user does not exist.</td>\n  \t\t</tr>\n  \t</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "lockAccountCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/airlock-2fa/app-devices/{deviceId}": {
          "delete": {
            "tags": [
              "/_Airlock 2FA"
            ],
            "summary": "Unenrolls an Airlock 2FA app device of the user.",
            "operationId": "unenrollAppDevice",
            "responses": {
              "204": {
                "description": "The device has been unenrolled.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The device does not exist or one of following cases has occurred:\n<div class=\"iam-error-code\">\n \t<table>\n \t\t<tr>\n \t\t\t<td>ACCOUNT_NOT_FOUND</td>\n \t\t\t<td>The user has no Airlock 2FA account.</td>\n \t\t</tr>\n \t\t<tr>\n \t\t\t<td>USER_NOT_FOUND</td>\n \t\t\t<td>The user does not exist.</td>\n \t\t</tr>\n \t</table>\n </div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "unenrollAppDeviceCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "deviceId",
              "in": "path",
              "description": "The ID of the device to be unenrolled.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/airlock-2fa/hardware-devices/{deviceId}": {
          "delete": {
            "tags": [
              "/_Airlock 2FA"
            ],
            "summary": "Unassigns an Airlock 2FA hardware device of the user.",
            "operationId": "unenrollHardwareDevice",
            "responses": {
              "204": {
                "description": "The device has been unassigned.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The device does not exist or one of following cases has occurred:\n<div class=\"iam-error-code\">\n \t<table>\n \t\t<tr>\n \t\t\t<td>ACCOUNT_NOT_FOUND</td>\n \t\t\t<td>The user has no Airlock 2FA account.</td>\n \t\t</tr>\n \t\t<tr>\n \t\t\t<td>USER_NOT_FOUND</td>\n \t\t\t<td>The user does not exist.</td>\n \t\t</tr>\n \t</table>\n </div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "unenrollHardwareDeviceCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "deviceId",
              "in": "path",
              "description": "The ID of the device to be unassigned.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/relationships/airlock-2fa-hardware-tokens": {
          "post": {
            "tags": [
              "/_Airlock 2FA"
            ],
            "summary": "Assigns Airlock 2FA hardware tokens to a user.",
            "operationId": "addHardwareTokenAssignments",
            "requestBody": {
              "description": "List of tokens to be assigned",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/ToManyRelationshipDocument"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ToManyRelationshipDocument"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "All tokens have been assigned to the user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid or not all tokens could not be assigned. Also returned if at least one token does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "<div class=\"iam-error-code\"><table>\n<tr>\n<td>USER_NOT_FOUND</td>\n<td>The user does not exist.</td>\n</tr>\n<tr>\n<td>ACCOUNT_NOT_FOUND</td>\n<td>The user does not have an Airlock 2FA account.</td>\n</tr>\n</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "addHardwareTokenAssignmentsCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/authentication-method/add": {
          "post": {
            "tags": [
              "/_Authentication",
              "/_Internal"
            ],
            "summary": "Add an authentication method to the user.",
            "operationId": "addAuthenticationMethod",
            "requestBody": {
              "description": "The authentication method to add.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthenticationMethodAddRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "If the authentication method was added to the user.",
                "content": {
                  "application/json": {}
                }
              },
              "400": {
                "description": "If the authentication method is not allowed to be added to the user.",
                "content": {
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user or authentication method does not exist.",
                "content": {
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "addAuthenticationMethodCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/authentication-method/activate/{authMethodKey}": {
          "post": {
            "tags": [
              "/_Authentication",
              "/_Internal"
            ],
            "summary": "Sets an additional active authentication method.",
            "operationId": "setAdditionalActiveMethod",
            "requestBody": {
              "description": "Contains the user's new active authentication method.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserActiveAuthenticationMethodRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "The user's additional active authentication method has been set.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid or the requested authentication method is not allowed.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Authentication",
              "/_Internal"
            ],
            "summary": "Delete a user's additional active authentication method for the given identifier.",
            "operationId": "deleteAdditionalAuthenticationMethod",
            "responses": {
              "204": {
                "description": "The user's additional active authentication method has been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid or the supplied authentication method is invalid.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "setAdditionalActiveMethodCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "authMethodKey",
              "in": "path",
              "description": "The identifier of the additional auth method property.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/authentication-method/activate": {
          "post": {
            "tags": [
              "/_Authentication"
            ],
            "summary": "Sets a user's active authentication method.",
            "operationId": "setActiveMethod",
            "requestBody": {
              "description": "Contains the user's new active authentication method.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserActiveAuthenticationMethodRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "The user's active authentication method has been set.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid or the requested authentication method is not allowed.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Authentication"
            ],
            "summary": "Delete a user's active authentication method.",
            "operationId": "deleteAuthenticationMethod",
            "responses": {
              "204": {
                "description": "The user's active authentication method has been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "setActiveMethodCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/authentication-method/allowed": {
          "get": {
            "tags": [
              "/_Authentication",
              "/_Internal"
            ],
            "summary": "Retrieves the information for the user about authentication methods that are allowed as <ul> <li>active</li> <li>next</li> <li>addable</li> </ul> .",
            "operationId": "getAuthenticationMethods",
            "responses": {
              "200": {
                "description": "The response contains data about the authentication methods.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "getAuthenticationMethodsCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/authentication-method/migrate": {
          "post": {
            "tags": [
              "/_Authentication"
            ],
            "summary": "Sets a user's authentication method migration.",
            "operationId": "setMigrationMethod",
            "requestBody": {
              "description": "Contains the user's new authentication method migration.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserAuthenticationMethodMigrationRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "The user's authentication method migration has been set.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid or at least one of the supplied authentication methods is not allowed.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Authentication"
            ],
            "summary": "Delete a user's next authentication methods and the migration date.",
            "operationId": "resetMigration",
            "responses": {
              "204": {
                "description": "The user's next authentication method has been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "setMigrationMethodCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/authentication-method": {
          "get": {
            "tags": [
              "/_Authentication"
            ],
            "summary": "Retrieves the authentication method data of a user.",
            "operationId": "retrieve_7",
            "responses": {
              "200": {
                "description": "The response contains data on the authentication method.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "204": {
                "description": "If the user has neither an active authentication method nor an\nauthentication method migration.\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieve_7CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/x509/certificates": {
          "get": {
            "tags": [
              "/_Certificate",
              "/_Internal"
            ],
            "summary": "Retrieves all certificates of the user.",
            "operationId": "getAll_1",
            "responses": {
              "200": {
                "description": "Retrieved certificates.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_Certificate",
              "/_Internal"
            ],
            "summary": "Adds a certificate to the user.",
            "operationId": "add",
            "requestBody": {
              "description": "Contains additional request parameters.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentCertificateAddRequest"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentCertificateAddRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "201": {
                "description": "The certificate has been added.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "If the certificate is not valid.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user or its certificate does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "getAll_1CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/x509/certificates/{certificateId}": {
          "delete": {
            "tags": [
              "/_Certificate",
              "/_Internal"
            ],
            "summary": "Deletes a user's certificate.",
            "operationId": "delete_6",
            "responses": {
              "204": {
                "description": "The certificate has been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user or its certificate does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "delete_6CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "certificateId",
              "in": "path",
              "description": "The ID of the certificate to be deleted.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/cronto/devices/{id}/push": {
          "post": {
            "tags": [
              "/_Cronto",
              "/_Internal"
            ],
            "summary": "Allows Push notifications for a Cronto device.",
            "operationId": "allowPushNotificationsForDevice",
            "responses": {
              "204": {
                "description": "Push notifications for the device have been allowed.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or there is no device with this ID.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Cronto",
              "/_Internal"
            ],
            "summary": "Disallows Push notifications for a Cronto device.",
            "operationId": "disallowPushNotificationsForDevice",
            "responses": {
              "204": {
                "description": "Push notifications for the device have been disallowed.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or there is no device with this ID.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "allowPushNotificationsForDeviceCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the requested device.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/cronto": {
          "post": {
            "tags": [
              "/_Cronto"
            ],
            "summary": "Creates a Cronto account for this user.",
            "operationId": "createAccount_1",
            "responses": {
              "201": {
                "description": "The account has been created for this user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "<div class=\"iam-error-code\"><table>\n<tr>\n<td>NO_VASCO_LICENSE_AVAILABLE</td>\n<td>No unused Vasco license is available. Import more licenses.</td>\n</tr>\n</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "409": {
                "description": "The user already has a Cronto account.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Cronto"
            ],
            "summary": "Deletes a user's Cronto account.",
            "operationId": "deleteAccount_1",
            "responses": {
              "204": {
                "description": "The account has been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have a Cronto account.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "createAccount_1CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/cronto/activation-codes": {
          "get": {
            "tags": [
              "/_Cronto"
            ],
            "summary": "Retrieves all Cronto activation codes of the user.",
            "operationId": "retrieveCodes",
            "responses": {
              "200": {
                "description": "Retrieved Cronto activation codes.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have a Cronto account.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_Cronto"
            ],
            "summary": "Creates a new Cronto activation code for this user.",
            "operationId": "createCode",
            "responses": {
              "201": {
                "description": "The activation code has been created for this user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The activation code limit for this user has been reached (currently 1).",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have a Cronto account.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveCodesCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/cronto/activation-codes/{codeId}": {
          "get": {
            "tags": [
              "/_Cronto"
            ],
            "summary": "Retrieves a specific Cronto activation code of the user by ID.",
            "operationId": "retrieveCode",
            "responses": {
              "200": {
                "description": "Retrieved Cronto activation code.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist, does not have a Cronto account or there is no code with this ID.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Cronto"
            ],
            "summary": "Deletes a user's Cronto activation code.",
            "operationId": "deleteCode",
            "responses": {
              "204": {
                "description": "The code has been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist, does not have a Cronto account or there is no code with this ID.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveCodeCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "patch": {
            "tags": [
              "/_Cronto"
            ],
            "summary": "Updates properties on a Cronto activation code.",
            "operationId": "updateCode",
            "requestBody": {
              "description": "The document containing the attributes that should be updated. Omitted attributes are left unchanged.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentCrontoActivationCodePatchData"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentCrontoActivationCodePatchData"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "The activation code was updated successfully. The complete updated code is returned.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or there is no code with this ID.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "codeId",
              "in": "path",
              "description": "The ID of the requested code.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/cronto/devices/{id}": {
          "get": {
            "tags": [
              "/_Cronto"
            ],
            "summary": "Retrieves a specific Cronto device of the user by ID.",
            "operationId": "retrieveDevice_1",
            "responses": {
              "200": {
                "description": "Retrieved Cronto device.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or there is no device with this ID.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Cronto"
            ],
            "summary": "Deletes a user's Cronto device.",
            "operationId": "deleteDevice_1",
            "responses": {
              "204": {
                "description": "The device has been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or there is no device with this ID.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveDevice_1CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the requested device.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/cronto/devices/{id}/enable": {
          "post": {
            "tags": [
              "/_Cronto"
            ],
            "summary": "Enables a Cronto device.",
            "operationId": "enableDevice_1",
            "responses": {
              "204": {
                "description": "The device has been enabled.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or there is no device with this ID.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Cronto"
            ],
            "summary": "Disables a Cronto device.",
            "operationId": "disableDevice_1",
            "responses": {
              "204": {
                "description": "The device has been disabled.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or there is no device with this ID.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "enableDevice_1CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the requested device.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/cronto/devices": {
          "get": {
            "tags": [
              "/_Cronto"
            ],
            "summary": "Retrieves all Cronto devices of the user.",
            "operationId": "retrieveDevices_1",
            "responses": {
              "200": {
                "description": "Retrieved Cronto devices.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have a Cronto account.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveDevices_1CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/fido/credentials/{credentialId}": {
          "delete": {
            "tags": [
              "/_FIDO"
            ],
            "summary": "Deletes a FIDO credential from the user specified.",
            "operationId": "deleteCredential",
            "responses": {
              "204": {
                "description": "The credential has been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have a credential with the given ID.\n<div class=\"iam-error-code\"><table>\n\t<tr>\n\t\t<td>USER_NOT_FOUND</td>\n\t\t<td>The user does not exist.</td>\n\t</tr>\n</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "deleteCredentialCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "credentialId",
              "in": "path",
              "description": "The ID of the credential to delete.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/fido/credentials/{credentialId}/lock": {
          "post": {
            "tags": [
              "/_FIDO"
            ],
            "summary": "Locks a FIDO credential belonging to the user specified.",
            "operationId": "lockCredential",
            "responses": {
              "200": {
                "description": "The credential was already locked",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "201": {
                "description": "The credential has been locked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have a credential with the given ID.\n<div class=\"iam-error-code\"><table>\n\t<tr>\n\t\t<td>USER_NOT_FOUND</td>\n\t\t<td>The user does not exist.</td>\n\t</tr>\n</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_FIDO"
            ],
            "summary": "Unlocks a FIDO credential belonging to the user specified.",
            "operationId": "unlockCredential",
            "responses": {
              "200": {
                "description": "The credential was already unlocked",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "204": {
                "description": "The credential has been unlocked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have a credential with the given ID.\n<div class=\"iam-error-code\"><table>\n\t<tr>\n\t\t<td>USER_NOT_FOUND</td>\n\t\t<td>The user does not exist.</td>\n\t</tr>\n</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "lockCredentialCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "credentialId",
              "in": "path",
              "description": "The ID of the credential to lock.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/fido/credentials": {
          "get": {
            "tags": [
              "/_FIDO"
            ],
            "summary": "Lists all FIDO credentials of the specified user.",
            "operationId": "retrieveCredentials",
            "responses": {
              "200": {
                "description": "Retrieved FIDO credentials.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "<div class=\"iam-error-code\"><table>\n<tr>\n<td>USER_NOT_FOUND</td>\n<td>The user does not exist.</td>\n</tr>\n</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveCredentialsCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/oath/hotp": {
          "get": {
            "tags": [
              "/_OATH OTP"
            ],
            "summary": "Retrieves all existing event-based OATH OTP tokens of the user.",
            "operationId": "retrieveTokens_1",
            "responses": {
              "200": {
                "description": "Retrieved available event-based OATH OTP tokens.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The underlying OATH OTP settings are not event-based.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_OATH OTP"
            ],
            "summary": "Adds a new event-based OATH OTP token to the user.",
            "operationId": "addToken_1",
            "responses": {
              "201": {
                "description": "OATH OTP token added.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "OATH OTP token not added because max token count reached.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The underlying OATH OTP settings are not event-based.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveTokens_1CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/oath/hotp/{hotpItemId}": {
          "get": {
            "tags": [
              "/_OATH OTP"
            ],
            "summary": "Retrieves a particular event-based OATH OTP token of the user as QR code image.",
            "operationId": "retrieveTokenAsQrCodeImage",
            "responses": {
              "200": {
                "description": "Retrieved available event-based OATH OTP token as QR code image.",
                "content": {
                  "image/png": {}
                }
              },
              "403": {
                "description": "Access to the requested service is forbidden. Authentication will not help.",
                "content": {
                  "image/png": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have the specified OATH OTP token.",
                "content": {
                  "image/png": {}
                }
              },
              "501": {
                "description": "The underlying OATH OTP settings are not event-based.",
                "content": {
                  "image/png": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_OATH OTP"
            ],
            "summary": "Deletes an event-based OATH OTP token of the user.",
            "operationId": "deleteToken_1",
            "responses": {
              "204": {
                "description": "Removed the event-based OATH OTP token for the user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have the OATH OTP token to be removed.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The underlying OATH OTP settings are not event-based.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveTokenAsQrCodeImageCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "hotpItemId",
              "in": "path",
              "description": "The identification of the OATH OTP token.",
              "required": true,
              "schema": {
                "pattern": "[^/]+(:|%3A)[^/]+",
                "type": "string"
              }
            },
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/oath/hotp/{hotpItemId}/increment-counter": {
          "post": {
            "tags": [
              "/_OATH OTP",
              "/_Internal"
            ],
            "summary": "Increments the counter of an event-based OATH OTP token of the user by a given amount.",
            "operationId": "incrementCounter",
            "requestBody": {
              "description": "The amount by which the counter will be increased.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HotpTokenIncrementCounterData"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "The counter of the event-based OATH OTP token for the user has been incremented.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have the OATH OTP token.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The underlying OATH OTP settings are not event-based.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "incrementCounterCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "hotpItemId",
              "in": "path",
              "description": "The identification of the OATH OTP token.",
              "required": true,
              "schema": {
                "pattern": "[^/]+(:|%3A)[^/]+",
                "type": "string"
              }
            },
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/oath/hotp/{hotpItemId}/activation-letter/order": {
          "get": {
            "tags": [
              "/_OATH OTP",
              "/_Internal"
            ],
            "summary": "Retrieves the activation letter order status for the token.",
            "operationId": "retrieveActivationLetterOrderStatus_1",
            "responses": {
              "200": {
                "description": "Retrieved the activation letter order status.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have the OATH OTP token.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The underlying OATH OTP settings are not event-based.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_OATH OTP",
              "/_Internal"
            ],
            "summary": "Orders a new activation letter for this OATH OTP token.",
            "operationId": "orderActivationLetter_1",
            "responses": {
              "204": {
                "description": "A new activation letter has been ordered.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "An activation letter is already ordered for this OATH OTP token.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have the OATH OTP token.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The underlying OATH OTP settings are not event-based.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_OATH OTP",
              "/_Internal"
            ],
            "summary": "Cancels the order of an activation letter for this OATH OTP token.",
            "operationId": "unorderActivationLetter_1",
            "responses": {
              "204": {
                "description": "The order has been cancelled.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "No activation letter is currently ordered for this OATH OTP token.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have the OATH OTP token.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The underlying OATH OTP settings are not event-based.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveActivationLetterOrderStatus_1CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "hotpItemId",
              "in": "path",
              "description": "The identification of the OATH OTP token.",
              "required": true,
              "schema": {
                "pattern": "[^/]+(:|%3A)[^/]+",
                "type": "string"
              }
            },
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/oath/hotp/activation-letters": {
          "get": {
            "tags": [
              "/_OATH OTP",
              "/_Internal"
            ],
            "summary": "Retrieves the activation letters (if available).",
            "operationId": "retrieveActivationLetters",
            "responses": {
              "200": {
                "description": "Retrieved the activation letters.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The underlying OATH OTP settings are not event-based.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveActivationLettersCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/matrix/order": {
          "get": {
            "tags": [
              "/_Matrix",
              "/_Internal"
            ],
            "summary": "Get the matrix card order.",
            "operationId": "getOrder",
            "responses": {
              "200": {
                "description": "If an order exists.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user or the order do not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_Matrix",
              "/_Internal"
            ],
            "summary": "Order a matrix card.",
            "operationId": "order",
            "responses": {
              "200": {
                "description": "If the matrix card was ordered.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Matrix",
              "/_Internal"
            ],
            "summary": "Cancel a matrix card order.",
            "operationId": "cancelOrder",
            "responses": {
              "200": {
                "description": "If the matrix card order was canceled."
              }
            }
          },
          "options": {
            "operationId": "getOrderCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/matrix/cards/{matrixCardId}": {
          "delete": {
            "tags": [
              "/_Matrix",
              "/_Internal"
            ],
            "summary": "Deletes a user's matrix card.",
            "operationId": "delete_7",
            "responses": {
              "204": {
                "description": "The matrix card has been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user or its matrix card does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "delete_7CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "matrixCardId",
              "in": "path",
              "description": "The ID of the matrix card to be deleted.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/IdentityMatrixCard"
              }
            },
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/matrix/cards": {
          "get": {
            "tags": [
              "/_Matrix",
              "/_Internal"
            ],
            "summary": "Retrieves all matrix cards of the user.",
            "operationId": "getAll_2",
            "responses": {
              "200": {
                "description": "Retrieved matrix cards.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_Matrix",
              "/_Internal"
            ],
            "summary": "Generate a matrix card.",
            "operationId": "generate",
            "responses": {
              "201": {
                "description": "If the matrix card was generated.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "403": {
                "description": "If attempting to generate more than 2 matrix cards for a user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "getAll_2CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/matrix/usage": {
          "get": {
            "tags": [
              "/_Matrix",
              "/_Internal"
            ],
            "summary": "Retrieves usage information about matrix cards.",
            "operationId": "getUsage",
            "responses": {
              "200": {
                "description": "Retrieved matrix card usage information.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "getUsageCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/matrix/usage/reset-unanswered-challenges": {
          "post": {
            "tags": [
              "/_Matrix",
              "/_Internal"
            ],
            "summary": "Resets unanswered matrix card challenges.",
            "operationId": "resetUnansweredChallenges",
            "responses": {
              "200": {
                "description": "If the reset was successful and returning the updated matrix card usage.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "resetUnansweredChallengesCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/mtan": {
          "get": {
            "tags": [
              "/_mTAN"
            ],
            "summary": "Retrieves all existing mTAN tokens of the user.",
            "operationId": "retrieveTokens_2",
            "responses": {
              "200": {
                "description": "Retrieved available mTAN tokens.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_mTAN"
            ],
            "summary": "Adds a new mTAN token to the user.",
            "operationId": "addToken_2",
            "requestBody": {
              "description": "Contains additional request parameters.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentMtanTokenAddRequest"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentMtanTokenAddRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "201": {
                "description": "mTAN token added.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid or mTAN token not added because max token count reached.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveTokens_2CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/mtan/iak/order": {
          "post": {
            "tags": [
              "/_mTAN",
              "/_Internal"
            ],
            "summary": "Order an mTAN IAK letter.",
            "operationId": "orderIak",
            "responses": {
              "200": {
                "description": "If the mTAN IAK letter was ordered.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "Order not created because max token count reached.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_mTAN",
              "/_Internal"
            ],
            "summary": "Cancel an mTAN IAK letter order.",
            "operationId": "cancelIakOrder",
            "responses": {
              "200": {
                "description": "If the mTAN IAK letter order was canceled.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "orderIakCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/mtan/{mtanItemId}/change-label": {
          "post": {
            "tags": [
              "/_mTAN"
            ],
            "summary": "Changes the label (alias) of an mTAN token.",
            "operationId": "changeLabel",
            "requestBody": {
              "description": "Contains the new mobile phone number.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MtanTokenChangeLabelRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Label changed.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or cannot be retrieved with the current configuration, or the mTAN token doesn't exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "If mTAN is not configured or the configuration does not support labels.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "changeLabelCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "mtanItemId",
              "in": "path",
              "description": "The identification of the mTAN token whose mobile phone number is to be changed.",
              "required": true,
              "schema": {
                "pattern": "[^/]+(:|%3A)[^/]+",
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/mtan/{mtanItemId}/change-phone-number": {
          "post": {
            "tags": [
              "/_mTAN"
            ],
            "summary": "Changes the mobile phone number of an mTAN token.",
            "operationId": "changePhoneNumber",
            "requestBody": {
              "description": "Contains the new mobile phone number.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MtanTokenChangePhoneNumberRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Mobile phone number changed.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or cannot be retrieved with the current configuration, or the mTAN token doesn't exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "changePhoneNumberCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "mtanItemId",
              "in": "path",
              "description": "The identification of the mTAN token whose mobile phone number is to be changed.",
              "required": true,
              "schema": {
                "pattern": "[^/]+(:|%3A)[^/]+",
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/mtan/{mtanItemId}": {
          "get": {
            "tags": [
              "/_mTAN"
            ],
            "summary": "Retrieves a particular mTAN token of the user.",
            "operationId": "retrieveToken_1",
            "responses": {
              "200": {
                "description": "Retrieved available mTAN token.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or cannot be retrieved with the current configuration, or the mTAN token doesn't exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_mTAN"
            ],
            "summary": "Deletes an mTAN token of the user.",
            "operationId": "deleteToken_2",
            "responses": {
              "204": {
                "description": "mTAN token deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveToken_1CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "patch": {
            "tags": [
              "/_mTAN",
              "/_Internal"
            ],
            "summary": "Updates a particular mTAN token of the user.",
            "operationId": "updateToken_1",
            "requestBody": {
              "description": "Contains additional request parameters.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentMtanTokenUpdateRequest"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestDocumentMtanTokenUpdateRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "If the update was successful.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or cannot be retrieved with the current configuration, or the mTAN token doesn't exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "mtanItemId",
              "in": "path",
              "description": "The identification of the mTAN token to which the SMS is to be sent.",
              "required": true,
              "schema": {
                "pattern": "[^/]+(:|%3A)[^/]+",
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/mtan/iak/generate": {
          "post": {
            "tags": [
              "/_mTAN"
            ],
            "summary": "Generates an mTAN IAK letter.",
            "operationId": "generateIak",
            "responses": {
              "200": {
                "description": "If the mTAN IAK letter was generated.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "generateIakCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/mtan/iak": {
          "get": {
            "tags": [
              "/_mTAN"
            ],
            "summary": "Retrieves the latest mTAN IAK letter of this user.",
            "operationId": "getIak",
            "responses": {
              "200": {
                "description": "If an IAK exists.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or there is no IAK.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "getIakCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/mtan/{mtanItemId}/send-otp": {
          "post": {
            "tags": [
              "/_mTAN"
            ],
            "summary": "Generates an OTP and sends it in an SMS to the specified mTAN token.",
            "operationId": "sendOtp",
            "requestBody": {
              "description": "Contains additional request parameters.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MtanTokenSendOtpRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "SMS with OTP has been successfully sent.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The user or the phone number doesn't exist or doesn't match.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "500": {
                "description": "An error occurred while sending the SMS.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "sendOtpCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "mtanItemId",
              "in": "path",
              "description": "The identification of the mTAN token to which the SMS is to be sent.",
              "required": true,
              "schema": {
                "pattern": "[^/]+(:|%3A)[^/]+",
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/mtan/{mtanItemId}/send-sms": {
          "post": {
            "tags": [
              "/_mTAN"
            ],
            "summary": "Sends an SMS to the specified mTAN token.",
            "operationId": "sendSms_1",
            "requestBody": {
              "description": "Contains additional request parameters.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MtanTokenSendSmsRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "SMS has been successfully sent.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The user or the phone number does not exist or does not match.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "500": {
                "description": "An error occurred while sending the SMS.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "sendSms_1CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "mtanItemId",
              "in": "path",
              "description": "The identification of the mTAN token to which the SMS is to be sent.",
              "required": true,
              "schema": {
                "pattern": "[^/]+(:|%3A)[^/]+",
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/mtan/{mtanItemId}/verify-otp": {
          "post": {
            "tags": [
              "/_mTAN"
            ],
            "summary": "Verifies an OTP value that has previously been sent to the user's mTAN token.",
            "operationId": "verifyOtp",
            "requestBody": {
              "description": "Contains additional request parameters.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MtanTokenVerifyOtpRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "The OTP token is correct.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The OTP token is not correct.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "verifyOtpCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "mtanItemId",
              "in": "path",
              "description": "The identification of the mTAN token to which the SMS is to be sent.",
              "required": true,
              "schema": {
                "pattern": "[^/]+(:|%3A)[^/]+",
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/password/check": {
          "post": {
            "tags": [
              "/_Password"
            ],
            "summary": "Checks the password for the user.",
            "operationId": "checkPassword",
            "requestBody": {
              "description": "The password to check.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PasswordCheckRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "The password is correct.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The password is not correct.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "checkPasswordCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/password": {
          "get": {
            "tags": [
              "/_Password"
            ],
            "summary": "Retrieves password information.",
            "operationId": "retrievePassword",
            "responses": {
              "200": {
                "description": "User's password retrieved.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Password"
            ],
            "summary": "Deletes the password.",
            "operationId": "deletePassword_1",
            "responses": {
              "204": {
                "description": "The password was deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrievePasswordCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/password/direct-print": {
          "post": {
            "tags": [
              "/_Password",
              "/_Internal"
            ],
            "summary": "Orders direct print of a new password letter (if a renderer is configured).",
            "operationId": "directPrintPassword",
            "responses": {
              "204": {
                "description": "The direct print request was successfully processed.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "If \"direct print\" is not configured.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "directPrintPasswordCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/password/enforce-change": {
          "post": {
            "tags": [
              "/_Password"
            ],
            "summary": "Enforces a password change upon next login or after a specific date.",
            "operationId": "enforcePasswordChange",
            "requestBody": {
              "description": "The date after which the change will be enforced.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EnforcePasswordChangeRequest"
                  }
                }
              }
            },
            "responses": {
              "204": {
                "description": "Password change is enforced.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Password"
            ],
            "summary": "Resets an enforced password change.",
            "operationId": "resetEnforcePasswordChange",
            "responses": {
              "204": {
                "description": "The password change enforcement has been canceled.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "enforcePasswordChangeCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/password/generate": {
          "post": {
            "tags": [
              "/_Password"
            ],
            "summary": "Generates a new password for the user.",
            "operationId": "generatePassword_1",
            "responses": {
              "200": {
                "description": "The password generation request was successfully processed.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "If \"direct print\" is configured.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "generatePassword_1CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/password/order": {
          "post": {
            "tags": [
              "/_Password"
            ],
            "summary": "Orders a new password.",
            "operationId": "orderPassword",
            "responses": {
              "204": {
                "description": "A new password has been ordered.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Password"
            ],
            "summary": "Resets a password order.",
            "operationId": "resetPasswordOrder",
            "responses": {
              "204": {
                "description": "The new password order has been canceled.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "orderPasswordCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/password/reset/attempts": {
          "delete": {
            "tags": [
              "/_Password"
            ],
            "summary": "Resets the failed password reset attempts (only for flow-based password reset).",
            "operationId": "resetFailedPasswordResetAttempts",
            "responses": {
              "204": {
                "description": "The failed password reset attempts have been reset.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "resetFailedPasswordResetAttemptsCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/password/reset/email": {
          "post": {
            "tags": [
              "/_Password"
            ],
            "summary": "Triggers the password self service and sends an email with a reset link to the user.",
            "operationId": "resetPasswordByEmail",
            "responses": {
              "200": {
                "description": "The password reset email was successfully sent.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The password reset email could not be sent.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "resetPasswordByEmailCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/password/reset-validity": {
          "post": {
            "tags": [
              "/_Password"
            ],
            "summary": "Unlocks the user and resets the validity of the initial password to the configured value.",
            "operationId": "resetPasswordValidity",
            "responses": {
              "200": {
                "description": "The password's validity was reset and the user unlocked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "If the preconditions are not met for extending the validity.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "resetPasswordValidityCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/password/reset": {
          "post": {
            "tags": [
              "/_Password"
            ],
            "summary": "Sets a user's password.",
            "operationId": "setPassword",
            "requestBody": {
              "description": "Contains the new password.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PasswordResetRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "New password set.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "<div class=\"iam-error-code\"><table>\n<tr>\n<td>PASSWORD_POLICY_VIOLATED</td>\n<td>The new password violates the password policy. See <a href=\"#passwordPolicyDetailCodes\">password policy violation detail codes</a>.</td>\n</tr>\n</table>\n</div>\n",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "setPasswordCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/secret-questions/answers": {
          "delete": {
            "tags": [
              "/_Secret Questions"
            ],
            "summary": "Deletes all answers of the user.",
            "operationId": "deleteAllAnswers",
            "responses": {
              "204": {
                "description": "All answers of the user have been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The Secret Questions feature is not configured or disabled for the user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "deleteAllAnswersCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/secret-questions/{questionId}/answer": {
          "delete": {
            "tags": [
              "/_Secret Questions"
            ],
            "summary": "Deletes a single answer for a Secret Question.",
            "operationId": "deleteAnswer",
            "responses": {
              "204": {
                "description": "The answer for the specified question has been deleted.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The question ID or the user do not exist or cannot be retrieved with the current configuration.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The Secret Questions feature is disabled for the user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "deleteAnswerCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "questionId",
              "in": "path",
              "description": "The question ID of the Secret Question to delete.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/secret-questions/enable": {
          "get": {
            "tags": [
              "/_Secret Questions",
              "/_Internal"
            ],
            "summary": "/ When adding new paths (like '/enable'), the validation on SecretQuestionsSettings must be extended to mark the path as a reserved keyword. Retrieves the enabled/disabled state for a user.",
            "operationId": "getSecretQuestionsState",
            "responses": {
              "200": {
                "description": "Secret Questions are enabled.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or Secret Questions are disabled.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The Secret Questions feature is not configured.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_Secret Questions"
            ],
            "summary": "Enables the Secret Questions feature for the user.",
            "operationId": "enableSecretQuestions",
            "responses": {
              "204": {
                "description": "Secret Questions have been enabled for the user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Secret Questions"
            ],
            "summary": "Disables the Secret Questions feature for the user.",
            "operationId": "disableSecretQuestions",
            "responses": {
              "204": {
                "description": "Secret Questions have been disabled for the user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "getSecretQuestionsStateCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/secret-questions": {
          "get": {
            "tags": [
              "/_Secret Questions"
            ],
            "summary": "Retrieves all answered questions of the user.",
            "operationId": "retrieveAnsweredQuestions",
            "responses": {
              "200": {
                "description": "The available Secret Questions retrieved.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The Secret Questions feature is not configured or disabled for the user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveAnsweredQuestionsCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/secret-questions/answers/missing": {
          "get": {
            "tags": [
              "/_Secret Questions"
            ],
            "summary": "Retrieves the number of missing answers.",
            "operationId": "retrieveNumberOfMissingAnswers",
            "responses": {
              "200": {
                "description": "The number of missing answers retrieved.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The Secret Questions feature is not configured or disabled for the user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveNumberOfMissingAnswersCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/secret-questions/{questionId}/lock": {
          "delete": {
            "tags": [
              "/_Secret Questions"
            ],
            "summary": "Unlocks a blocked question.",
            "operationId": "unblockAnswerForQuestion",
            "responses": {
              "204": {
                "description": "The question has been successfully unlocked.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The question ID or the user do not exist or cannot be retrieved with the current configuration.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The Secret Questions feature is disabled for the user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "unblockAnswerForQuestionCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "questionId",
              "in": "path",
              "description": "The question ID of the Secret Question to unlock.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/secret-questions/{questionId}/verify": {
          "post": {
            "tags": [
              "/_Secret Questions"
            ],
            "summary": "Verifies the answer to a single secret question.",
            "operationId": "verifyAnswer",
            "requestBody": {
              "description": "Contains the answer to the question.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VerifySecretQuestionAnswerRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "The answer is correct.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The answer is not correct.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The Secret Questions feature is disabled for the user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "verifyAnswerCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "questionId",
              "in": "path",
              "description": "The question ID of the question being answered.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/oath/totp": {
          "get": {
            "tags": [
              "/_OATH OTP"
            ],
            "summary": "Retrieves all existing time-based OATH OTP tokens of the user.",
            "operationId": "retrieveTokens_3",
            "responses": {
              "200": {
                "description": "Retrieved available time-based OATH OTP tokens.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The underlying OATH OTP settings are not time-based.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_OATH OTP"
            ],
            "summary": "Adds a new time-based OATH OTP token to the user.",
            "operationId": "addToken_3",
            "responses": {
              "201": {
                "description": "Time-based OATH OTP token added.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "OATH OTP token not added because max token count reached.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The underlying OATH OTP settings are not time-based.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveTokens_3CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/oath/totp/{totpItemId}": {
          "get": {
            "tags": [
              "/_OATH OTP"
            ],
            "summary": "Retrieves a particular time-based OATH OTP token of the user as QR code image.",
            "operationId": "retrieveTokenAsQrCodeImage_1",
            "responses": {
              "200": {
                "description": "Retrieved available time-based OATH OTP token as QR code image.",
                "content": {
                  "image/png": {}
                }
              },
              "403": {
                "description": "Access to the requested service is forbidden. Authentication will not help.",
                "content": {
                  "image/png": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have the specified OATH OTP token.",
                "content": {
                  "image/png": {}
                }
              },
              "501": {
                "description": "The underlying OATH OTP settings are not time-based.",
                "content": {
                  "image/png": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_OATH OTP"
            ],
            "summary": "Deletes a time-based OATH OTP token of the user.",
            "operationId": "deleteToken_3",
            "responses": {
              "204": {
                "description": "Removed the time-based OATH OTP token for the user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have the OATH OTP token to be removed.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The underlying OATH OTP settings are not time-based.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveTokenAsQrCodeImage_1CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "totpItemId",
              "in": "path",
              "description": "The identification of the OATH OTP token.",
              "required": true,
              "schema": {
                "pattern": "[^/]+(:|%3A)[^/]+",
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/oath/totp/{totpItemId}/activation-letter/order": {
          "get": {
            "tags": [
              "/_OATH OTP",
              "/_Internal"
            ],
            "summary": "Retrieves the activation letter order status.",
            "operationId": "retrieveActivationLetterOrderStatus_2",
            "responses": {
              "200": {
                "description": "Retrieved the activation letter order status.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have the OATH OTP token.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The underlying OATH OTP settings are not time-based.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_OATH OTP",
              "/_Internal"
            ],
            "summary": "Orders a new activation letter for this OATH OTP token.",
            "operationId": "orderActivationLetter_2",
            "responses": {
              "204": {
                "description": "A new activation letter has been ordered.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "An activation letter is already ordered for this OATH OTP token.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have the OATH OTP token.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The underlying OATH OTP settings are not time-based.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_OATH OTP",
              "/_Internal"
            ],
            "summary": "Cancels the order of an activation letter for this OATH OTP token.",
            "operationId": "unorderActivationLetter_2",
            "responses": {
              "204": {
                "description": "The order has been cancelled.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "No activation letter is currently ordered for this OATH OTP token.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have the OATH OTP token.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The underlying OATH OTP settings are not time-based.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveActivationLetterOrderStatus_2CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "totpItemId",
              "in": "path",
              "description": "The identification of the OATH OTP token.",
              "required": true,
              "schema": {
                "pattern": "[^/]+(:|%3A)[^/]+",
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/oath/totp/activation-letters": {
          "get": {
            "tags": [
              "/_OATH OTP",
              "/_Internal"
            ],
            "summary": "Retrieves the activation letters (if available).",
            "operationId": "retrieveActivationLetters_1",
            "responses": {
              "200": {
                "description": "Retrieved the activation letters.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The underlying OATH OTP settings are not time-based.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveActivationLetters_1CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/oath/totp/{totpItemId}/synchronize": {
          "post": {
            "tags": [
              "/_OATH OTP",
              "/_Internal"
            ],
            "summary": "Synchronizes the time-based OATH OTP token of the user.",
            "operationId": "synchronizeTime",
            "responses": {
              "200": {
                "description": "Synchronized the time-based OATH OTP token for the user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist or does not have the OATH OTP token.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "The underlying OATH OTP settings are not time-based.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "synchronizeTimeCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "totpItemId",
              "in": "path",
              "description": "The identification of the OATH OTP token.",
              "required": true,
              "schema": {
                "pattern": "[^/]+(:|%3A)[^/]+",
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/relationships/assigned-vasco-otp-devices": {
          "post": {
            "tags": [
              "/_Vasco"
            ],
            "summary": "Assigns additional Vasco OTP devices to the user.",
            "operationId": "addDeviceAssignments",
            "requestBody": {
              "description": "The device identifiers.",
              "content": {
                "*/*": {
                  "schema": true
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "The device relationships have been added to the user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid or assignment(s) cannot be added.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "There is no user with the given ID.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Vasco"
            ],
            "summary": "Removes Vasco OTP device assignments from the user.",
            "operationId": "deleteDeviceAssignment",
            "requestBody": {
              "description": "The device identifiers.",
              "content": {
                "application/vnd.api+json": {
                  "schema": {
                    "$ref": "#/components/schemas/ToManyRelationshipDocument"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ToManyRelationshipDocument"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "The device relationships have been removed from the user.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "The request was invalid.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "There is no user with the given ID.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "addDeviceAssignmentsCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/vasco-otp/devices/{deviceId}/activation-letters/send-directly": {
          "post": {
            "tags": [
              "/_Vasco"
            ],
            "summary": "Directly sends (prints) an activation letter (if configured).",
            "operationId": "directPrintActivationLetter",
            "responses": {
              "204": {
                "description": "The request was successfully processed.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user or device does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "501": {
                "description": "If \"direct print\" is not configured.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "directPrintActivationLetterCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "deviceId",
              "in": "path",
              "description": "The ID of the device.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/vasco-otp/devices/{deviceId}/activation-letters/order": {
          "get": {
            "tags": [
              "/_Vasco"
            ],
            "summary": "Retrieves the activation letter order status for this user and device.",
            "operationId": "retrieveActivationLetterOrderStatus_3",
            "responses": {
              "200": {
                "description": "Retrieved the activation letter order status.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user or device does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "post": {
            "tags": [
              "/_Vasco"
            ],
            "summary": "Orders a new activation letter for this user and device.",
            "operationId": "orderActivationLetter_3",
            "responses": {
              "204": {
                "description": "A new activation letter has been ordered.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "An activation letter is already ordered.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user or device does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/_Vasco"
            ],
            "summary": "Cancels the order of an activation letter for this user and device.",
            "operationId": "unorderActivationLetter_3",
            "responses": {
              "204": {
                "description": "The order has been cancelled.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "400": {
                "description": "No activation letter is currently ordered.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user or device does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveActivationLetterOrderStatus_3CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "deviceId",
              "in": "path",
              "description": "The ID of the device.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/vasco-otp/devices/{deviceId}": {
          "get": {
            "tags": [
              "/_Vasco"
            ],
            "summary": "Retrieves a specific Vasco device assigned to the given user.",
            "operationId": "retrieveDevice_2",
            "responses": {
              "200": {
                "description": "Retrieved Vasco device.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The device or user with the given ID does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveDevice_2CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "deviceId",
              "in": "path",
              "description": "The ID of the requested device.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/vasco-otp/devices": {
          "get": {
            "tags": [
              "/_Vasco"
            ],
            "summary": "Retrieves all Vasco devices assigned to the given user.",
            "operationId": "retrieveDevices_2",
            "responses": {
              "200": {
                "description": "Retrieved Vasco devices.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "The user does not exist.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveDevices_2CorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/vasco-otp/devices/{deviceId}/relationships/next-device": {
          "options": {
            "operationId": "setNextDeviceCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "patch": {
            "tags": [
              "/_Vasco"
            ],
            "summary": "Assigns/unassigns next device.",
            "operationId": "setNextDevice",
            "requestBody": {
              "description": "Contains the ID of the 'next device'.",
              "content": {
                "*/*": {
                  "schema": true
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "The relationship has been updated accordingly.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "At least one of the involved devices was not found.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "deviceId",
              "in": "path",
              "description": "The ID of this device.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/users/{userId}/tokens/vasco-otp/devices/{deviceId}/relationships/previous-device": {
          "options": {
            "operationId": "setPreviousDeviceCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/_other"
            ]
          },
          "patch": {
            "tags": [
              "/_Vasco"
            ],
            "summary": "Assigns/unassigns previous device.",
            "operationId": "setPreviousDevice",
            "requestBody": {
              "description": "Contains the ID of the 'previous device'.",
              "content": {
                "*/*": {
                  "schema": true
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "The relationship has been updated accordingly.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              },
              "404": {
                "description": "At least one of the involved devices was not found.",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json": {}
                }
              }
            }
          },
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "deviceId",
              "in": "path",
              "description": "The ID of this device.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/authentication/password/check-and-change": {
          "post": {
            "tags": [
              "/authentication_Internal"
            ],
            "operationId": "checkAndChangePassword",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PasswordAuthenticationAndChangeRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "default": {
                "description": "default response",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json;qs=0.9": {}
                }
              }
            }
          },
          "options": {
            "operationId": "checkAndChangePasswordCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/authentication_other"
            ]
          }
        },
        "/authentication/": {
          "get": {
            "tags": [
              "/authentication_Internal"
            ],
            "operationId": "checkAuthentication",
            "responses": {
              "default": {
                "description": "default response",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json;qs=0.9": {}
                }
              }
            }
          },
          "delete": {
            "tags": [
              "/authentication_Internal"
            ],
            "operationId": "logout",
            "responses": {
              "default": {
                "description": "default response",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json;qs=0.9": {}
                }
              }
            }
          },
          "options": {
            "operationId": "checkAuthenticationCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/authentication_other"
            ]
          }
        },
        "/authentication/password/check": {
          "post": {
            "tags": [
              "/authentication_Internal"
            ],
            "operationId": "checkUserPassword",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PasswordAuthenticationRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "default": {
                "description": "default response",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json;qs=0.9": {}
                }
              }
            }
          },
          "options": {
            "operationId": "checkUserPasswordCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/authentication_other"
            ]
          }
        },
        "/authentication/settings/custom-urls": {
          "get": {
            "tags": [
              "/authentication_Internal"
            ],
            "operationId": "retrieveCustomUrls",
            "responses": {
              "default": {
                "description": "default response",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json;qs=0.9": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveCustomUrlsCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/authentication_other"
            ]
          }
        },
        "/authentication/settings/instance": {
          "get": {
            "tags": [
              "/authentication_Internal"
            ],
            "operationId": "retrieveInstance",
            "responses": {
              "default": {
                "description": "default response",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json;qs=0.9": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveInstanceCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/authentication_other"
            ]
          }
        },
        "/authentication/settings/languages": {
          "get": {
            "tags": [
              "/authentication_Internal"
            ],
            "operationId": "retrieveLanguages",
            "responses": {
              "default": {
                "description": "default response",
                "content": {
                  "application/vnd.api+json": {},
                  "application/json;qs=0.9": {}
                }
              }
            }
          },
          "options": {
            "operationId": "retrieveLanguagesCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/authentication_other"
            ]
          }
        },
        "/authentication/settings/validate-dynamic-urls": {
          "post": {
            "tags": [
              "/authentication_Internal"
            ],
            "operationId": "validateDynamicUrls",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UrlValidationRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "default": {
                "description": "default response",
                "content": {
                  "application/json": {}
                }
              }
            }
          },
          "options": {
            "operationId": "validateDynamicUrlsCorsPreflight",
            "responses": {
              "default": {
                "description": "default response"
              }
            },
            "tags": [
              "/authentication_other"
            ]
          }
        }
      },
      "components": {
        "schemas": {
          "CrontoActivationCodePatchDataOverride": {
            "type": "object",
            "properties": {
              "validFrom": {
                "type": "string",
                "nullable": true
              },
              "validTo": {
                "type": "string",
                "nullable": true
              },
              "allowedNumberOfActivations": {
                "type": "integer",
                "nullable": true
              },
              "allowedPlatforms": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "printingOptions": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "PasswordChangeRequest": {
            "required": [
              "newPassword",
              "oldPassword"
            ],
            "type": "object",
            "properties": {
              "oldPassword": {
                "type": "string",
                "description": "The admin's existing password."
              },
              "newPassword": {
                "type": "string",
                "description": "The desired new password."
              }
            }
          },
          "LicenseUploadRequest": {
            "required": [
              "license"
            ],
            "type": "object",
            "properties": {
              "license": {
                "type": "string",
                "description": "The license key."
              }
            }
          },
          "LinkObject": {
            "type": "object",
            "properties": {
              "href": {
                "type": "string"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "Links": {
            "type": "object",
            "properties": {
              "links": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/LinkObject"
                },
                "writeOnly": true
              }
            }
          },
          "MaintenanceMessagePatchData": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "The location (optional, depending on configuration).",
                "nullable": true
              },
              "active": {
                "type": "boolean",
                "description": "Whether the message is active or not.",
                "nullable": true
              },
              "systemAvailable": {
                "type": "boolean",
                "description": "Whether the system is available when this message is displayed or not.",
                "nullable": true
              },
              "validFrom": {
                "type": "string",
                "description": "The validity start date of this message.",
                "nullable": true
              },
              "validTo": {
                "type": "string",
                "description": "The validity end date of this message.",
                "nullable": true
              },
              "translations": {
                "$ref": "#/components/schemas/OptionalValueMapStringString"
              }
            }
          },
          "Metadata": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "values": {
                "type": "object",
                "additionalProperties": {},
                "writeOnly": true
              },
              "type": {
                "type": "string"
              }
            },
            "discriminator": {
              "propertyName": "type"
            }
          },
          "OptionalValueMapStringString": {
            "type": "object",
            "description": "The translations of this message. This represents a mapping from the ISO-639-1 (2 character) language code to the message (as HTML) in that language."
          },
          "Relationships": {
            "type": "object"
          },
          "RequestDocumentMaintenanceMessagePatchData": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceObjectMaintenanceMessagePatchData"
              }
            }
          },
          "ResourceObjectMaintenanceMessagePatchData": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/MaintenanceMessagePatchData"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "MaintenanceMessageRequest": {
            "required": [
              "active",
              "systemAvailable",
              "validFrom",
              "validTo"
            ],
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "The location (optional, depending on configuration)."
              },
              "active": {
                "type": "boolean",
                "description": "Whether the message is active or not."
              },
              "systemAvailable": {
                "type": "boolean",
                "description": "Whether the system is available when this message is displayed or not."
              },
              "validFrom": {
                "type": "string",
                "description": "The validity start date of this message.",
                "format": "date-time"
              },
              "validTo": {
                "type": "string",
                "description": "The validity end date of this message.",
                "format": "date-time"
              },
              "translations": {
                "type": "object",
                "additionalProperties": {
                  "type": "string",
                  "description": "The translations of this message. This represents a mapping from the ISO-639-1 (2 character) language code to the message (as HTML) in that language."
                },
                "description": "The translations of this message. This represents a mapping from the ISO-639-1 (2 character) language code to the message (as HTML) in that language."
              }
            }
          },
          "RequestDocumentMaintenanceMessageRequest": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceObjectMaintenanceMessageRequest"
              }
            }
          },
          "ResourceObjectMaintenanceMessageRequest": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/MaintenanceMessageRequest"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "RequestDocumentSmsSendRequest": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceObjectSmsSendRequest"
              }
            }
          },
          "ResourceObjectSmsSendRequest": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/SmsSendRequest"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "SmsSendRequest": {
            "required": [
              "isFlash",
              "message",
              "phoneNumber"
            ],
            "type": "object",
            "properties": {
              "originator": {
                "maxLength": 16,
                "minLength": 1,
                "type": "string",
                "description": "The originator of the message. If the originator is pre-configured, this value must not be set. Otherwise, the client can choose the originator. The limitations regarding length are: <ul> <li>For alphanumeric originators, the maximal length is 11.</li> <li>For numeric originators, the maximal length is 16.</li> </ul>",
                "nullable": true
              },
              "phoneNumber": {
                "maxLength": 2147483647,
                "minLength": 1,
                "type": "string",
                "description": "The phone number to send the message to. The phone number is expected to be normalized (no characters other than an (optional) leading + followed by numbers). For example: +41791234567 or 0041791234567"
              },
              "message": {
                "maxLength": 2147483647,
                "minLength": 1,
                "type": "string",
                "description": "The message itself."
              },
              "isFlash": {
                "type": "boolean",
                "description": "Whether or not to use a flash message."
              }
            }
          },
          "AdminContextData": {
            "type": "object",
            "properties": {
              "values": {
                "type": "object",
                "additionalProperties": {},
                "writeOnly": true
              }
            }
          },
          "RequestDocumentAdminContextData": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceObjectAdminContextData"
              }
            }
          },
          "ResourceObjectAdminContextData": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/AdminContextData"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "IdentityAdministrator": {
            "type": "object"
          },
          "AdminLockRequest": {
            "required": [
              "reason"
            ],
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "description": "A short explanation why the user is being locked."
              }
            }
          },
          "AdminCreateRequest": {
            "type": "object",
            "properties": {
              "contextData": {
                "type": "object",
                "additionalProperties": {
                  "nullable": true
                },
                "nullable": true
              }
            }
          },
          "RequestDocumentAdminCreateRequest": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceObjectAdminCreateRequest"
              }
            }
          },
          "ResourceObjectAdminCreateRequest": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/AdminCreateRequest"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "RequestDocumentVoid": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceObjectVoid"
              }
            }
          },
          "ResourceObjectVoid": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "type": "object"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "CollectionDocumentRole": {
            "type": "object",
            "properties": {
              "jsonapi": {
                "$ref": "#/components/schemas/JsonApi"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/DocumentMetadata"
              },
              "included": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceObjectObject"
                }
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceObjectRole"
                }
              }
            }
          },
          "DocumentMetadata": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "values": {
                "type": "object",
                "additionalProperties": {},
                "writeOnly": true
              },
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "type": {
                "type": "string"
              }
            },
            "discriminator": {
              "propertyName": "type"
            }
          },
          "JsonApi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "ResourceObjectObject": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "type": "object"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "ResourceObjectRole": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/Role"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "Role": {
            "type": "object",
            "properties": {
              "roleName": {
                "type": "string"
              },
              "idleTimeout": {
                "type": "integer",
                "format": "int32"
              },
              "lifetime": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "IdentityApiKey": {
            "type": "object"
          },
          "ApiKeyCreateRequest": {
            "type": "object",
            "properties": {
              "description": {
                "maxLength": 100,
                "minLength": 1,
                "type": "string",
                "description": "Description of the API key.",
                "nullable": true
              },
              "validFrom": {
                "type": "string",
                "description": "The validity start date.",
                "nullable": true
              },
              "validTo": {
                "type": "string",
                "description": "The validity end date.",
                "nullable": true
              },
              "locked": {
                "type": "boolean",
                "description": "The lock information.",
                "nullable": true
              }
            }
          },
          "RequestDocumentApiKeyCreateRequest": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceObjectApiKeyCreateRequest"
              }
            }
          },
          "ResourceObjectApiKeyCreateRequest": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/ApiKeyCreateRequest"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "ApiKeyUpdateRequest": {
            "type": "object",
            "properties": {
              "description": {
                "maxLength": 100,
                "minLength": 1,
                "type": "string",
                "description": "Description of the API key. If present, must be between 1 and 100 characters.",
                "nullable": true
              },
              "validFrom": {
                "type": "string",
                "description": "The validity start date.",
                "nullable": true
              },
              "validTo": {
                "type": "string",
                "description": "The validity end date.",
                "nullable": true
              }
            }
          },
          "RequestDocumentApiKeyUpdateRequest": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceObjectApiKeyUpdateRequest"
              }
            }
          },
          "ResourceObjectApiKeyUpdateRequest": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/ApiKeyUpdateRequest"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "IdentityPlanUsage": {
            "type": "object"
          },
          "PlanUsageUpdateRequest": {
            "type": "object",
            "properties": {
              "name": {
                "maxLength": 100,
                "minLength": 1,
                "type": "string",
                "description": "Name of the Plan-Usage. The name must be unique within the subscription and must be between 1 and 100 characters. Valid characters are [A-Za-z0-9_-].",
                "nullable": true
              },
              "rateLimit": {
                "type": "integer",
                "description": "Rate limit of the Plan-Usage (requests / second).",
                "format": "int32",
                "nullable": true
              }
            }
          },
          "RequestDocumentPlanUsageUpdateRequest": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceObjectPlanUsageUpdateRequest"
              }
            }
          },
          "ResourceObjectPlanUsageUpdateRequest": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/PlanUsageUpdateRequest"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "PlanUsageCreateRequest": {
            "required": [
              "name"
            ],
            "type": "object",
            "properties": {
              "name": {
                "maxLength": 100,
                "minLength": 1,
                "pattern": "[A-Za-z0-9_-]+",
                "type": "string",
                "description": "Name of the Plan-Usage. The name must be unique within the subscription and must be between 1 and 100 characters. Valid characters are [A-Za-z0-9_-]."
              },
              "rateLimit": {
                "minimum": 0,
                "type": "integer",
                "description": "Rate limit of the Plan-Usage (requests / second).",
                "format": "int32",
                "nullable": true
              }
            }
          },
          "RequestDocumentPlanUsageCreateRequest": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceObjectPlanUsageCreateRequest"
              }
            }
          },
          "ResourceObjectPlanUsageCreateRequest": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/PlanUsageCreateRequest"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "IdentitySubscription": {
            "type": "object"
          },
          "RequestDocumentSubscriptionCreateRequest": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceObjectSubscriptionCreateRequest"
              }
            }
          },
          "ResourceObjectSubscriptionCreateRequest": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/SubscriptionCreateRequest"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "SubscriptionCreateRequest": {
            "required": [
              "displayName"
            ],
            "type": "object",
            "properties": {
              "displayName": {
                "maxLength": 100,
                "minLength": 1,
                "type": "string",
                "description": "Human-readable name of the subscription. The name does not have to be unique and must be between 1 and 100 characters."
              }
            }
          },
          "PlainTechClientLockRequest": {
            "required": [
              "reason"
            ],
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "description": "A short explanation why the technical client is being locked."
              }
            }
          },
          "PlainTechClientUpdateRequest": {
            "type": "object",
            "properties": {
              "displayName": {
                "maxLength": 100,
                "minLength": 1,
                "type": "string",
                "description": "Human-readable name of the client. The name does not have to be unique and must be between 1 and 100 characters.",
                "nullable": true
              },
              "description": {
                "maxLength": 100,
                "minLength": 1,
                "type": "string",
                "description": "Description of the technical client. If present, must be between 1 and 100 characters.",
                "nullable": true
              },
              "label": {
                "maxLength": 100,
                "minLength": 1,
                "type": "string",
                "description": "Label of the technical client. If present, must be between 1 and 100 characters.",
                "nullable": true
              }
            }
          },
          "RequestDocumentPlainTechClientUpdateRequest": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceObjectPlainTechClientUpdateRequest"
              }
            }
          },
          "ResourceObjectPlainTechClientUpdateRequest": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/PlainTechClientUpdateRequest"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "PlainTechClientCreateRequest": {
            "required": [
              "displayName"
            ],
            "type": "object",
            "properties": {
              "displayName": {
                "maxLength": 100,
                "minLength": 1,
                "type": "string",
                "description": "Human-readable name of the technical client. The name does not have to be unique and must be between 1 and 100 characters."
              },
              "description": {
                "maxLength": 100,
                "minLength": 1,
                "type": "string",
                "description": "Description of the technical client. If present, must be between 1 and 100 characters.",
                "nullable": true
              },
              "label": {
                "maxLength": 100,
                "minLength": 1,
                "type": "string",
                "description": "Label of the technical client. If present, must be between 1 and 100 characters.",
                "nullable": true
              }
            }
          },
          "RequestDocumentPlainTechClientCreateRequest": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceObjectPlainTechClientCreateRequest"
              }
            }
          },
          "ResourceObjectPlainTechClientCreateRequest": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/PlainTechClientCreateRequest"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "SynchronizeAirlock2FAHardwareTokenRequest": {
            "required": [
              "passcode1",
              "passcode2"
            ],
            "type": "object",
            "properties": {
              "passcode1": {
                "maxLength": 2147483647,
                "minLength": 1,
                "type": "string",
                "description": "The first of two required passcodes."
              },
              "passcode2": {
                "maxLength": 2147483647,
                "minLength": 1,
                "type": "string",
                "description": "The second of two required passcodes."
              }
            }
          },
          "SynchronizeVascoTokenRequest": {
            "required": [
              "otp1",
              "otp2"
            ],
            "type": "object",
            "properties": {
              "otp1": {
                "maxLength": 2147483647,
                "minLength": 1,
                "type": "string",
                "description": "The first of two required OTPs."
              },
              "otp2": {
                "maxLength": 2147483647,
                "minLength": 1,
                "type": "string",
                "description": "The second of two required OTPs."
              }
            }
          },
          "RequestDocumentVascoDevicePatchData": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceObjectVascoDevicePatchData"
              }
            }
          },
          "ResourceObjectVascoDevicePatchData": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/VascoDevicePatchData"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "VascoDevicePatchData": {
            "type": "object",
            "properties": {
              "validFrom": {
                "type": "string",
                "description": "The validity start date of this device.",
                "nullable": true
              },
              "validTo": {
                "type": "string",
                "description": "The validity end date of this device.",
                "nullable": true
              }
            }
          },
          "RequestDocumentUserContextDataRequest": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceObjectUserContextDataRequest"
              }
            }
          },
          "ResourceObjectUserContextDataRequest": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/UserContextDataRequest"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "UserContextDataRequest": {
            "type": "object",
            "properties": {
              "values": {
                "type": "object",
                "additionalProperties": {},
                "writeOnly": true
              }
            }
          },
          "UserLockRequest": {
            "required": [
              "reason"
            ],
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "description": "A short explanation why the user is being locked."
              }
            }
          },
          "ChangeUsernameRequest": {
            "required": [
              "newUsername"
            ],
            "type": "object",
            "properties": {
              "newUsername": {
                "type": "string",
                "description": "The new desired username (identity)."
              }
            }
          },
          "UserValidityFromRequest": {
            "required": [
              "from"
            ],
            "type": "object",
            "properties": {
              "from": {
                "type": "string",
                "description": "The date from which the user is valid."
              }
            }
          },
          "RequestDocumentUserValidityPeriodRequest": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceObjectUserValidityPeriodRequest"
              }
            }
          },
          "ResourceObjectUserValidityPeriodRequest": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/UserValidityPeriodRequest"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "UserValidityPeriodRequest": {
            "type": "object",
            "properties": {
              "from": {
                "type": "string",
                "description": "The date from which the user became or will become valid - if not set, the user has always been valid (optional).",
                "format": "date-time",
                "nullable": true
              },
              "until": {
                "type": "string",
                "description": "The date until the user will be or has been valid - if not set, the user will always be valid (optional).",
                "format": "date-time",
                "nullable": true
              }
            }
          },
          "UserValidityUntilRequest": {
            "required": [
              "until"
            ],
            "type": "object",
            "properties": {
              "until": {
                "type": "string",
                "description": "The date until the user will be valid.",
                "format": "date-time"
              }
            }
          },
          "RequestDocumentUserCreateRequest": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceObjectUserCreateRequest"
              }
            }
          },
          "ResourceObjectUserCreateRequest": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/UserCreateRequest"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "UserCreateRequest": {
            "type": "object",
            "properties": {
              "password": {
                "type": "string",
                "description": "The initial password for the new user (optional).",
                "nullable": true
              },
              "contextData": {
                "type": "object",
                "additionalProperties": {
                  "description": "The context data name/value pairs (optional).",
                  "nullable": true
                },
                "description": "The context data name/value pairs (optional).",
                "nullable": true
              }
            }
          },
          "IdentityBulkTokenMigrationStatus": {
            "type": "object"
          },
          "BulkTokenMigrationData": {
            "required": [
              "migrateTo",
              "userIds"
            ],
            "type": "object",
            "properties": {
              "migrateTo": {
                "uniqueItems": true,
                "type": "array",
                "description": "The authentication methods to migrate to. Multiple authentication methods are only possible when allowed in the configuration. When intending to clear the migration, an empty set must be sent.",
                "items": {
                  "type": "string",
                  "description": "The authentication methods to migrate to. Multiple authentication methods are only possible when allowed in the configuration. When intending to clear the migration, an empty set must be sent."
                }
              },
              "migrateUntil": {
                "type": "string",
                "description": "The (optional) date by which the migration must be done.",
                "format": "date-time",
                "nullable": true
              },
              "userIds": {
                "maxItems": 2147483647,
                "minItems": 1,
                "uniqueItems": true,
                "type": "array",
                "description": "The user IDs for which to apply the migration.",
                "items": {
                  "type": "string",
                  "description": "The user IDs for which to apply the migration."
                }
              }
            }
          },
          "GenericTokenDataRequest": {
            "type": "object",
            "properties": {
              "values": {
                "type": "object",
                "additionalProperties": {},
                "writeOnly": true
              }
            }
          },
          "RequestDocumentGenericTokenDataRequest": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceObjectGenericTokenDataRequest"
              }
            }
          },
          "ResourceObjectGenericTokenDataRequest": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/GenericTokenDataRequest"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "ResourceIdentifier": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "ToManyRelationshipDocument": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceIdentifier"
                }
              }
            }
          },
          "AuthenticationMethodAddRequest": {
            "required": [
              "method"
            ],
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "description": "The authentication method to add."
              }
            }
          },
          "UserActiveAuthenticationMethodRequest": {
            "required": [
              "method"
            ],
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "description": "The new active authentication method. Allowed values are configurable, defaults are: <ul> <li>PASSWORD</li> <li>VASCO</li> <li>CRONTO</li> <li>SECURID</li> <li>MTAN</li> <li>OATH_OTP</li> <li>MATRIX</li> <li>EMAILOTP</li> <li>CERT</li> </ul> This list is configurable in REST API Configuration - User Provisioning Settings - Allowed Active Authentication Methods."
              }
            }
          },
          "UserAuthenticationMethodMigrationRequest": {
            "required": [
              "nextMethods"
            ],
            "type": "object",
            "properties": {
              "nextMethods": {
                "maxItems": 2147483647,
                "minItems": 1,
                "uniqueItems": true,
                "type": "array",
                "description": "The authentication methods to migrate to such as: <ul> <li>AIRLOCK_2FA</li> <li>VASCO</li> <li>CRONTO</li> <li>SECURID</li> <li>MTAN</li> <li>OATH_OTP</li> <li>MATRIX</li> <li>EMAILOTP</li> <li>CERT</li> <li>BINDING_TOKEN</li> <li>...</li> </ul> .",
                "items": {
                  "type": "string",
                  "description": "The authentication methods to migrate to such as: <ul> <li>AIRLOCK_2FA</li> <li>VASCO</li> <li>CRONTO</li> <li>SECURID</li> <li>MTAN</li> <li>OATH_OTP</li> <li>MATRIX</li> <li>EMAILOTP</li> <li>CERT</li> <li>BINDING_TOKEN</li> <li>...</li> </ul> ."
                }
              },
              "migrateUntil": {
                "type": "string",
                "description": "The date and time until which the migration has to be done - if omitted, there is no deadline for the migration.",
                "format": "date-time",
                "nullable": true
              }
            }
          },
          "CertificateAddRequest": {
            "required": [
              "pem"
            ],
            "type": "object",
            "properties": {
              "pem": {
                "maxLength": 2147483647,
                "minLength": 1,
                "type": "string",
                "description": "The PEM-encoded content of the certificate."
              }
            }
          },
          "RequestDocumentCertificateAddRequest": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceObjectCertificateAddRequest"
              }
            }
          },
          "ResourceObjectCertificateAddRequest": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/CertificateAddRequest"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "CrontoActivationCodePatchData": {
            "$ref": "#/components/schemas/CrontoActivationCodePatchDataOverride"
          },
          "RequestDocumentCrontoActivationCodePatchData": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceObjectCrontoActivationCodePatchData"
              }
            }
          },
          "ResourceObjectCrontoActivationCodePatchData": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/CrontoActivationCodePatchDataOverride"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "HotpTokenIncrementCounterData": {
            "required": [
              "amount"
            ],
            "type": "object",
            "properties": {
              "amount": {
                "minimum": 1,
                "type": "integer",
                "description": "Increments the event counter of the OATH OTP event-based token by the given amount.",
                "format": "int64"
              }
            }
          },
          "IdentityMatrixCard": {
            "type": "object"
          },
          "MtanTokenAddRequest": {
            "required": [
              "phoneNumber"
            ],
            "type": "object",
            "properties": {
              "phoneNumber": {
                "type": "string",
                "description": "The phone number of the new mTAN token."
              },
              "flash": {
                "type": "boolean",
                "description": "Whether or not the mTAN token should use flash messages. The value is ignored if the token does not support the configuration of flash preferences.",
                "nullable": true
              },
              "label": {
                "type": "string",
                "description": "The label associated with an mTAN token. Can be used to distinguish multiple mTAN tokens of a user, for example by using \"Private\" or \"Work\". The value is ignored if the token does not support labels.",
                "nullable": true
              }
            }
          },
          "RequestDocumentMtanTokenAddRequest": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceObjectMtanTokenAddRequest"
              }
            }
          },
          "ResourceObjectMtanTokenAddRequest": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/MtanTokenAddRequest"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "MtanTokenChangeLabelRequest": {
            "required": [
              "newLabel"
            ],
            "type": "object",
            "properties": {
              "newLabel": {
                "type": "string"
              }
            }
          },
          "MtanTokenChangePhoneNumberRequest": {
            "required": [
              "newPhoneNumber"
            ],
            "type": "object",
            "properties": {
              "newPhoneNumber": {
                "type": "string",
                "description": "The new phone number."
              }
            }
          },
          "MtanTokenSendOtpRequest": {
            "type": "object",
            "properties": {
              "originator": {
                "maxLength": 16,
                "minLength": 1,
                "type": "string",
                "description": "The originator of the message. If the originator is pre-configured, this value must not be set. Otherwise, the client can choose the originator. The limitations regarding length are: <ul> <li>For alphanumeric originators, the maximal length is 11.</li> <li>For numeric originators, the maximal length is 16.</li> </ul>",
                "nullable": true
              },
              "message": {
                "maxLength": 160,
                "minLength": 1,
                "type": "string",
                "description": "The message itself. If not set, the server's configured OTP template is used.",
                "nullable": true
              },
              "isFlash": {
                "type": "boolean",
                "description": "Whether or not to use a flash message. If not set, the token's configuration is used.",
                "nullable": true
              }
            }
          },
          "MtanTokenSendSmsRequest": {
            "required": [
              "message"
            ],
            "type": "object",
            "properties": {
              "originator": {
                "maxLength": 16,
                "minLength": 1,
                "type": "string",
                "description": "The originator of the message. If the originator is pre-configured, this value must not be set. Otherwise, the client can choose the originator. The limitations regarding length are: <ul> <li>For alphanumeric originators, the maximal length is 11.</li> <li>For numeric originators, the maximal length is 16.</li> </ul>",
                "nullable": true
              },
              "message": {
                "maxLength": 160,
                "minLength": 1,
                "type": "string",
                "description": "The message itself."
              },
              "isFlash": {
                "type": "boolean",
                "description": "Whether or not to use a flash message. If not set, the token's configuration is used.",
                "nullable": true
              }
            }
          },
          "MtanTokenUpdateRequest": {
            "type": "object",
            "properties": {
              "phoneNumber": {
                "type": "string",
                "description": "The phone number of the new mTAN token.",
                "nullable": true
              },
              "flash": {
                "type": "boolean",
                "description": "Whether or not the mTAN token should use flash messages. If not set, the server will determine an ideal value for the token. The value is ignored if the token does not support the configuration of flash preferences.",
                "nullable": true
              },
              "label": {
                "type": "string",
                "description": "The label associated with an mTAN token. Can be used to distinguish multiple mTAN tokens of a user, for example by using \"Private\" or \"Work\". The value is ignored if the token does not support labels.",
                "nullable": true
              }
            }
          },
          "RequestDocumentMtanTokenUpdateRequest": {
            "required": [
              "data"
            ],
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceObjectMtanTokenUpdateRequest"
              }
            }
          },
          "ResourceObjectMtanTokenUpdateRequest": {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "$ref": "#/components/schemas/MtanTokenUpdateRequest"
              },
              "relationships": {
                "$ref": "#/components/schemas/Relationships"
              },
              "links": {
                "$ref": "#/components/schemas/Links"
              },
              "meta": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "MtanTokenVerifyOtpRequest": {
            "required": [
              "otp",
              "verificationValue"
            ],
            "type": "object",
            "properties": {
              "otp": {
                "type": "string",
                "description": "The plain text OTP value received by the user in an SMS."
              },
              "verificationValue": {
                "type": "string",
                "description": "The OTP verification value generated by the service when the OTP had been sent. Provide the value that has been received while sending the OTP."
              }
            }
          },
          "PasswordCheckRequest": {
            "required": [
              "password"
            ],
            "type": "object",
            "properties": {
              "password": {
                "type": "string",
                "description": "The password to check for the user."
              }
            }
          },
          "EnforcePasswordChangeRequest": {
            "type": "object",
            "properties": {
              "changeAfter": {
                "type": "string",
                "description": "The password change is enforced on the specified date or upon next login if omitted.",
                "format": "date-time",
                "nullable": true
              }
            }
          },
          "PasswordResetRequest": {
            "required": [
              "password"
            ],
            "type": "object",
            "properties": {
              "password": {
                "type": "string",
                "description": "The password to set for the user."
              }
            }
          },
          "VerifySecretQuestionAnswerRequest": {
            "required": [
              "answer"
            ],
            "type": "object",
            "properties": {
              "answer": {
                "type": "string",
                "description": "The individual answers to a challenge."
              }
            }
          },
          "ToOneRelationshipDocument": {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ResourceIdentifier"
              }
            }
          },
          "PasswordAuthenticationAndChangeRequest": {
            "required": [
              "newPassword",
              "oldPassword",
              "username"
            ],
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "oldPassword": {
                "type": "string"
              },
              "newPassword": {
                "type": "string"
              }
            }
          },
          "PasswordAuthenticationRequest": {
            "required": [
              "password",
              "username"
            ],
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            }
          },
          "UrlValidationRequest": {
            "type": "object",
            "properties": {
              "afterLogoutUrl": {
                "type": "string",
                "nullable": true
              },
              "loginUrl": {
                "type": "string",
                "nullable": true
              }
            }
          }
        }
      },
      "x-tagGroups": [
        {
          "name": "Protected Airlock IAM Adminapp REST API",
          "tags": [
            "/_Internal",
            "/_other",
            "/_Password",
            "/_My",
            "/_License",
            "/_Logs",
            "/_Maintenance Messages",
            "/_SMS",
            "/_System",
            "/_Administrator",
            "/_Context Data",
            "/_Locking",
            "/_Roles",
            "/_Technical Client",
            "/_API key",
            "/_API Key",
            "/_Plan Usage",
            "/_Subscription",
            "/_Airlock 2FA",
            "/_Vasco",
            "/_Account Linking",
            "/_OAuth 2.0",
            "/_Remember-Me",
            "/_Statistics",
            "/_Validity",
            "/_Token Migration Bulk Change",
            "/_Generic Token",
            "/_Authentication",
            "/_Certificate",
            "/_Cronto",
            "/_FIDO",
            "/_OATH OTP",
            "/_Matrix",
            "/_mTAN",
            "/_Secret Questions"
          ]
        },
        {
          "name": "Authentication Airlock IAM Adminapp REST API",
          "tags": [
            "/authentication_Internal",
            "/authentication_other"
          ]
        }
      ]
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: adminapp-openapi-configmap
  namespace: '{{.Values.namespace}}'

{{- end }}